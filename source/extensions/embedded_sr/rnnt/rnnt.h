//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//
// rnnt.h: the header file includes types, methods and error code exposed by rnnt
//

#pragma once

#include <memory>
#include <string>

#include "rnntmessages.h"
#include "ispxinterfaces.h"

namespace Microsoft {
namespace CognitiveServices {
namespace Speech {
namespace RNNT {

/**
* The Callbacks type represents an application-defined structure used to register callbacks for RNNT events.
* The callbacks are invoked during the processing of the request, an application should spend as little time as possible
* in the callback function.
*/
struct Callbacks
{
    /**
     * A callback function that will be invoked when speech start is detected by RNN-T engine.
    */
    virtual void OnSpeechStartDetected(const RNNT::SpeechStartDetectedMsg&) {}

    /**
    * A callback function that will be invoked when a speech end is detected by RNN-T engine.
    */
    virtual void OnSpeechEndDetected(const RNNT::SpeechEndDetectedMsg&) {}

    /**
    * A callback function that will be invoked when a speech hypothesis is generated by RNN-T engine.
    */
    virtual void OnSpeechHypothesis(const RNNT::SpeechHypothesisMsg&) {}

    /**
    * A callback function that will be invoked when a sentence or phrase end is detected by RNN-T engine.
    */
    virtual void OnSpeechPhrase(const RNNT::SpeechPhraseMsg&) {}

    /**
    * A callback function that will be invoked when a turn is started from the perspective of RNN-T engine.
    */
    virtual void OnTurnStart(const RNNT::TurnStartMsg&) {}

    /**
    * A callback function that will be invoked when a turn is ended from the perspective of RNN-T engine.
    */
    virtual void OnTurnEnd() {}

    /**
    * A callback function that will be invoked when an error occurs.
    */
    virtual void OnError(const std::string& /*errorMessage*/) {}
};

using CallbacksPtr = std::shared_ptr<Callbacks>;

enum class RecognitionMode : unsigned int { Interactive = 0, Conversation = 1, Dictation = 2 };

struct IRnntClient
{
    virtual ~IRnntClient() {}
    virtual void ProcessAudio(const Impl::DataChunkPtr& audioChunk) = 0;
    virtual void FlushAudio() = 0;
    virtual void SetRecognitionMode(RNNT::RecognitionMode mode) = 0;
    virtual void Start() = 0;
    virtual void Stop() = 0;
    virtual bool Running() = 0;
};

using IRnntClientPtr = std::unique_ptr<IRnntClient>;

IRnntClientPtr CreateRnntClient(
    CallbacksPtr callback,
    std::shared_ptr<Impl::ISpxThreadService> threadService,
    const std::wstring& modelSpec,
    const std::wstring& tokenFile,
    bool displayText,
    size_t maxEndPaddingDim);

}}}}
