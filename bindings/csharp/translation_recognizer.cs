//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Carbon;

namespace Carbon.Recognition.Translation
{
    /// <summary>
    /// Defines the translation recognizer class containing both methods and events for translation.
    /// </summary>
    /// <example>
    /// An example to use the translation recognizer on a audio file and listen to events generated by the recognizer.
    /// <code>
    /// static void MySessionEventHandler(object sender, SessionEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recogniton: Session event: {0} ", e.ToString()));
    /// }
    ///
    /// static void MyIntermediateResultEventHandler(object sender, TranslationRecognitionResultEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recogniton: Intermediate result: {0} ", e.ToString()));
    /// }
    ///
    /// static void MyFinalResultEventHandler(object sender, TranslationRecognitionResultEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recogniton: Final result: {0} ", e.ToString()));
    /// }
    ///
    /// static void MyErrorHandler(object sender, RecognitionErrorEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recogniton: Error information: {0} ", e.ToString()));
    /// }
    ///
    /// static void TranslationRecognizerSample()
    /// {
    ///   TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName");
    ///
    ///   reco.OnSessionEvent += MySessionEventHandler;
    ///   reco.OnFinalResult += MyFinalResultEventHandler;
    ///   reco.OnIntermediateResult += MyIntermediateResultEventHandler;
    ///   reco.OnRecognitionError += MyErrorHandler;
    ///
    ///   // Starts recognition.
    ///   var result = await reco.RecognizeAsync();
    ///
    ///   reco.OnSessionEvent -= MySessionEventHandler;
    ///   reco.OnFinalResult -= MyFinalResultEventHandler;
    ///   reco.OnIntermediateResult -= MyIntermediateResultEventHandler;
    ///   reco.OnRecognitionError -= MyErrorHandler;
    ///
    ///   Console.WriteLine("Translation Recognition: Recognition result: " + result);
    /// }
    /// </code>
    /// </example>
    public sealed class TranslationRecognizer : Recognition.Recognizer
    {
        /// <summary>
        /// Defines event handler callend once intermediate recognition result are recevied.
        /// </summary>
        public event EventHandler<TranslationTextResultEventArgs> OnIntermediateResult;

        /// <summary>
        /// Defines event handler for the event when the final recognition result is recevied.
        /// </summary>
        public event EventHandler<TranslationTextResultEventArgs> OnFinalResult;

        /// <summary>
        /// Defines event handler for the event when an error is occured during recognition.
        /// </summary>
        public event EventHandler<RecognitionErrorEventArgs> OnRecognitionError;

        /// <summary>
        /// Defines event handler for the event when the translation audio syntheis result is received.
        /// </summary>
        public event EventHandler<TranslationSynthesisResultEventArgs> OnSynthesisResult;

        internal TranslationRecognizer(Internal.TranslationRecognizer recoImpl)
        {
            //this.recoImpl = recoImpl;

            //intermediateResultHandler = new ResultHandlerImpl(this, isFinalResultHandler: false);
            //recoImpl.IntermediateResult.Connect(intermediateResultHandler);

            //finalResultHandler = new ResultHandlerImpl(this, isFinalResultHandler: true);
            //recoImpl.FinalResult.Connect(finalResultHandler);

            //errorHandler = new ErrorHandlerImpl(this);
            //recoImpl.NoMatch.Connect(errorHandler);
            //recoImpl.Canceled.Connect(errorHandler);

            //recoImpl.SessionStarted.Connect(sessionStartedHandler);
            //recoImpl.SessionStopped.Connect(sessionStoppedHandler);
            //recoImpl.SoundStarted.Connect(soundStartedHandler);
            //recoImpl.SoundStopped.Connect(soundStoppedHandler);

            //Parameters = new ParameterCollection<TranslationRecognizer>(this);
        }

        /// <summary>
        /// Sets/Gets the spoken language of audio.
        /// </summary>
        public string SourceLanguage
        {
            get
            {
                return Parameters.Get<string>(ParameterNames.TranslationFromLanguage);
            }

            set
            {
                Parameters.Set(ParameterNames.TranslationFromLanguage, value);
            }
        }

        /// <summary>
        /// Sets/Gets a list target languages for translation. The language is specified in BCP-47 format.
        /// you The translation will provide translated text for each of language in the list.
        /// </summary>
        public IReadOnlyList<string> TargetLanguages { get; set; }

        /// <summary>
        /// Sets/Gets whether a voice output of the translated text is desired.
        /// </summary>
        public bool IsVoiceOutputDesired { get; set; }

        /// <summary>
        /// Represents the collection of parameters and their values defined for this <see cref="TranslationRecognizer"/>.
        /// </summary>
        public ParameterCollection<TranslationRecognizer> Parameters { get; }

        /// <summary>
        /// Starts translation recognition, and stops after the first utterance is recognized. The task returns the translation text as result.
        /// </summary>
        /// <returns>A task representing the recognition operation. The task returns a value of <see cref="TranslationTextResult"/> </returns>
        /// <example>
        /// Create a translation recognizer, get and print the recognition result
        /// <code>
        /// static void TranslationRecognizerSample()
        /// {
        ///   TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
        ///
        ///   // Starts recognition.
        ///   var result = await reco.RecognizeAsync();
        ///
        ///   reco.OnSessionEvent -= MySessionEventHandler;
        ///
        ///   Console.WriteLine("Translation Recognition: Recognition result: " + result);
        /// }
        /// </code>
        /// </example>
        public Task<TranslationTextResult> RecognizeAsync()
        {
            return Task.Run(() => { return new TranslationTextResult(this.recoImpl.Recognize()); });
        }

        /// <summary>
        /// Starts translation on a continuous audio stream, until user calls StopContinuousRecognitionAsync(). User must subscribe to
        /// result events to receive recognition results.
        /// </summary>
        /// <returns>A task representing the asynchronous operation that starts the recognition.</returns>
        public Task StartContinuousRecognitionAsync()
        {
            return Task.Run(() => { this.recoImpl.StartContinuousRecognition(); });
        }

        /// <summary>
        /// Stops continuous translation.
        /// </summary>
        /// <returns>A task representing the asynchronous operation that stops the recognition.</returns>
        public Task StopContinuousRecognitionAsync()
        {
            return Task.Run(() => { this.recoImpl.StopContinuousRecognition(); });
        }

        protected override void Dispose(bool disposing)
        {
            if (disposed)
            {
                return;
            }

            if (disposing)
            {
                recoImpl.IntermediateResult.Disconnect(intermediateResultHandler);
                recoImpl.FinalResult.Disconnect(finalResultHandler);
                recoImpl.NoMatch.Disconnect(errorHandler);
                recoImpl.Canceled.Disconnect(errorHandler);
                recoImpl.SessionStarted.Disconnect(sessionStartedHandler);
                recoImpl.SessionStopped.Disconnect(sessionStoppedHandler);
                recoImpl.SoundStarted.Disconnect(soundStartedHandler);
                recoImpl.SoundStopped.Disconnect(soundStoppedHandler);

                intermediateResultHandler.Dispose();
                finalResultHandler.Dispose();
                errorHandler.Dispose();
                recoImpl.Dispose();
                Parameters.Dispose();
                disposed = true;
                base.Dispose(disposing);
            }
        }

        internal Internal.TranslationRecognizer recoImpl;
        private ResultHandlerImpl intermediateResultHandler;
        private ResultHandlerImpl finalResultHandler;
        private ErrorHandlerImpl errorHandler;
        private bool disposed = false;

        // Defines an internal class to raise a C# event for intermediate/final result when a corresponding callback is invoked by the native layer.
        private class ResultHandlerImpl : Internal.TranslationTextEventListener
        {
            public ResultHandlerImpl(TranslationRecognizer recognizer, bool isFinalResultHandler)
            {
                this.recognizer = recognizer;
                this.isFinalResultHandler = isFinalResultHandler;
            }

            public override void Execute(Internal.TranslationTextResultEventArgs eventArgs)
            {
                if (recognizer.disposed)
                {
                    return;
                }

                TranslationTextResultEventArgs resultEventArg = null; // = new TranslationTextResultEventArgs(eventArgs);
                var handler = isFinalResultHandler ? recognizer.OnFinalResult : recognizer.OnIntermediateResult;
                if (handler != null)
                {
                    handler(this.recognizer, resultEventArg);
                }
            }

            private TranslationRecognizer recognizer;
            private bool isFinalResultHandler;
        }

        /// <summary>
        /// Defines an internal class to raise a C# event for error during recognition when a corresponding callback is invoked by the native layer.
        /// </summary>
        private class ErrorHandlerImpl : Internal.TranslationTextEventListener
        {
            public ErrorHandlerImpl(TranslationRecognizer recognizer)
            {
                this.recognizer = recognizer;
            }

            public override void Execute(Carbon.Internal.TranslationTextResultEventArgs eventArgs)
            {
                if (recognizer.disposed)
                {
                    return;
                }

                RecognitionErrorEventArgs resultEventArg = null; // new RecognitionErrorEventArgs(eventArgs.SessionId, eventArgs.Result.Reason);
                var handler = this.recognizer.OnRecognitionError;

                if (handler != null)
                {
                    handler(this.recognizer, resultEventArg);
                }
            }

            private TranslationRecognizer recognizer;
        }
    }

}
