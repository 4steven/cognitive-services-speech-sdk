//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CognitiveServices.Speech;

namespace Microsoft.CognitiveServices.Speech.Recognition.Translation
{
    /// <summary>
    /// Performs translation on the speech input.
    /// </summary>
    /// <example>
    /// An example to use the translation recognizer on a audio file and listen to events generated by the recognizer.
    /// <code>
    /// static void MySessionEventHandler(object sender, SessionEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recognition: Session event: {0} ", e.ToString()));
    /// }
    ///
    /// static void MyIntermediateResultEventHandler(object sender, TranslatioTextResultEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recognition: Intermediate result: {0} ", e.ToString()));
    /// }
    ///
    /// static void MyFinalResultEventHandler(object sender, TranslationTextResultEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recognition: Final result: {0} ", e.ToString()));
    /// }
    ///
    /// static void MyErrorHandler(object sender, RecognitionErrorEventArgs e)
    /// {
    ///    Console.WriteLine(String.Format("Translation recognition: Error information: {0} ", e.ToString()));
    /// }
    ///
    /// static void TranslationRecognizerSample()
    /// {
    ///   TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
    ///
    ///   reco.OnSessionEvent += MySessionEventHandler;
    ///   reco.FinalResultReceived += MyFinalResultEventHandler;
    ///   reco.IntermediateResultReceived += MyIntermediateResultEventHandler;
    ///   reco.RecognitionErrorRaised += MyErrorHandler;
    ///
    ///   // Starts recognition.
    ///   var result = await reco.RecognizeAsync();
    ///
    ///   reco.OnSessionEvent -= MySessionEventHandler;
    ///   reco.FinalResultReceived -= MyFinalResultEventHandler;
    ///   reco.IntermediateResultReceived -= MyIntermediateResultEventHandler;
    ///   reco.RecognitionErrorRaised -= MyErrorHandler;
    ///
    ///   Console.WriteLine("Translation Recognition: Recognition result: " + result);
    /// }
    /// </code>
    /// </example>
    public sealed class TranslationRecognizer : Recognition.Recognizer
    {
        /// <summary>
        /// The event <see cref="IntermediateResultReceived"/> signals that an intermediate recongition result is received.
        /// </summary>
        public event EventHandler<TranslationTextResultEventArgs> IntermediateResultReceived;

        /// <summary>
        /// The event <see cref="FinalResultReceived"/> signals that a final recognition result is received.
        /// </summary>
        public event EventHandler<TranslationTextResultEventArgs> FinalResultReceived;

        /// <summary>
        /// The event <see cref="RecognitionErrorRaised"/> signals that an error occurred during recognition.
        /// </summary>
        public event EventHandler<RecognitionErrorEventArgs> RecognitionErrorRaised;

        /// <summary>
        /// The event <see cref="SynthesisResultReceived"/> signals that a translation synthesis result is received.
        /// </summary>
        public event EventHandler<TranslationSynthesisResultEventArgs> SynthesisResultReceived;

        internal TranslationRecognizer(Internal.TranslationRecognizer recoImpl)
        {
            this.recoImpl = recoImpl;

            intermediateResultHandler = new ResultHandlerImpl(this, isFinalResultHandler: false);
            recoImpl.IntermediateResult.Connect(intermediateResultHandler);

            finalResultHandler = new ResultHandlerImpl(this, isFinalResultHandler: true);
            recoImpl.FinalResult.Connect(finalResultHandler);

            synthesisResultHandler = new SynthesisHandlerImpl(this);
            recoImpl.TranslationSynthesisResultEvent.Connect(synthesisResultHandler);

            errorHandler = new ErrorHandlerImpl(this);
            recoImpl.NoMatch.Connect(errorHandler);
            recoImpl.Canceled.Connect(errorHandler);

            recoImpl.SessionStarted.Connect(sessionStartedHandler);
            recoImpl.SessionStopped.Connect(sessionStoppedHandler);
            recoImpl.SpeechStartDetected.Connect(speechStartDetectedHandler);
            recoImpl.SpeechEndDetected.Connect(speechEndDetectedHandler);

            Parameters = new ParameterCollection<TranslationRecognizer>(this);
        }

        /// <summary>
        /// Gets the language name that was set when the recognizer was created.
        /// </summary>
        public string SourceLanguage
        {
            get
            {
                return Parameters.Get<string>(ParameterNames.TranslationFromLanguage);
            }
        }

        /// <summary>
        /// Gets target languages for translation that were set when the recognizer was created.
        /// The language is specified in BCP-47 format. The translation will provide translated text for each of language.
        /// </summary>
        public IReadOnlyList<string> TargetLanguages { get; }

        /// <summary>
        /// Gets/sets a boolean value which indicates whether a voice output of the translated text is desired.
        /// </summary>
        public bool IsVoiceOutputDesired { get; set; }

        /// <summary>
        /// The collection of parameters and their values defined for this <see cref="TranslationRecognizer"/>.
        /// </summary>
        public ParameterCollection<TranslationRecognizer> Parameters { get; }

        /// <summary>
        /// Starts recognition and translation, and stops after the first utterance is recognized. The task returns the translation text as result.
        /// </summary>
        /// <returns>A task representing the recognition operation. The task returns a value of <see cref="TranslationTextResult"/> </returns>
        /// <example>
        /// Create a translation recognizer, get and print the recognition result
        /// <code>
        /// static void TranslationRecognizerSample()
        /// {
        ///   TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
        ///
        ///   // Starts recognition.
        ///   var result = await reco.RecognizeAsync();
        ///
        ///   Console.WriteLine("Translation Recognition: Recognition result: " + result);
        /// }
        /// </code>
        /// </example>
        public Task<TranslationTextResult> RecognizeAsync()
        {
            return Task.Run(() => { return new TranslationTextResult(this.recoImpl.Recognize()); });
        }

        /// <summary>
        /// Starts recognition and translation on a continous audio stream, until StopContinuousRecognitionAsync() is called.
        /// User must subscribe to events to receive translation results.
        /// </summary>
        /// <returns>A task representing the asynchronous operation that starts the recognition.</returns>
        public Task StartContinuousRecognitionAsync()
        {
            return Task.Run(() => { this.recoImpl.StartContinuousRecognition(); });
        }

        /// <summary>
        /// Stops continuous recognition and translation.
        /// </summary>
        /// <returns>A task representing the asynchronous operation that stops the translation.</returns>
        public Task StopContinuousRecognitionAsync()
        {
            return Task.Run(() => { this.recoImpl.StopContinuousRecognition(); });
        }

        protected override void Dispose(bool disposing)
        {
            if (disposed)
            {
                return;
            }

            if (disposing)
            {
                recoImpl.IntermediateResult.Disconnect(intermediateResultHandler);
                recoImpl.FinalResult.Disconnect(finalResultHandler);
                recoImpl.NoMatch.Disconnect(errorHandler);
                recoImpl.Canceled.Disconnect(errorHandler);
                recoImpl.SessionStarted.Disconnect(sessionStartedHandler);
                recoImpl.SessionStopped.Disconnect(sessionStoppedHandler);
                recoImpl.SpeechStartDetected.Disconnect(speechStartDetectedHandler);
                recoImpl.SpeechEndDetected.Disconnect(speechEndDetectedHandler);
                recoImpl.TranslationSynthesisResultEvent.Disconnect(synthesisResultHandler);

                intermediateResultHandler?.Dispose();
                finalResultHandler?.Dispose();
                errorHandler?.Dispose();
                recoImpl?.Dispose();
                Parameters?.Dispose();
                disposed = true;
                base.Dispose(disposing);
            }
        }

        internal Internal.TranslationRecognizer recoImpl;
        private ResultHandlerImpl intermediateResultHandler;
        private ResultHandlerImpl finalResultHandler;
        private SynthesisHandlerImpl synthesisResultHandler;
        private ErrorHandlerImpl errorHandler;
        private bool disposed = false;

        // Defines an internal class to raise a C# event for intermediate/final result when a corresponding callback is invoked by the native layer.
        private class ResultHandlerImpl : Internal.TranslationTextEventListener
        {
            public ResultHandlerImpl(TranslationRecognizer recognizer, bool isFinalResultHandler)
            {
                this.recognizer = recognizer;
                this.isFinalResultHandler = isFinalResultHandler;
            }

            public override void Execute(Internal.TranslationTextResultEventArgs eventArgs)
            {
                if (recognizer.disposed)
                {
                    return;
                }

                TranslationTextResultEventArgs resultEventArg = new TranslationTextResultEventArgs(eventArgs);
                var handler = isFinalResultHandler ? recognizer.FinalResultReceived : recognizer.IntermediateResultReceived;
                if (handler != null)
                {
                    handler(this.recognizer, resultEventArg);
                }
            }

            private TranslationRecognizer recognizer;
            private bool isFinalResultHandler;
        }

        // Defines an internal class to raise a C# event for error during recognition when a corresponding callback is invoked by the native layer.
        private class ErrorHandlerImpl : Internal.TranslationTextEventListener
        {
            public ErrorHandlerImpl(TranslationRecognizer recognizer)
            {
                this.recognizer = recognizer;
            }

            public override void Execute(Microsoft.CognitiveServices.Speech.Internal.TranslationTextResultEventArgs eventArgs)
            {
                if (recognizer.disposed)
                {
                    return;
                }

                RecognitionErrorEventArgs resultEventArg = null; // new RecognitionErrorEventArgs(eventArgs.SessionId, eventArgs.Result.Reason);
                var handler = this.recognizer.RecognitionErrorRaised;

                if (handler != null)
                {
                    handler(this.recognizer, resultEventArg);
                }
            }

            private TranslationRecognizer recognizer;
        }

        // Defines an internal class to raise a C# event for intermediate/final result when a corresponding callback is invoked by the native layer.
        private class SynthesisHandlerImpl : Internal.TranslationSynthesisEventListener
        {
            public SynthesisHandlerImpl(TranslationRecognizer recognizer)
            {
                this.recognizer = recognizer;
            }

                
            public override void Execute(Internal.TranslationSynthesisResultEventArgs eventArgs)
            {
                if (recognizer.disposed)
                {
                    return;
                }

                var resultEventArg = new TranslationSynthesisResultEventArgs(eventArgs);
                var handler = recognizer.SynthesisResultReceived;
                if (handler != null)
                {
                    handler(this.recognizer, resultEventArg);
                }
            }

            private TranslationRecognizer recognizer;
        }
    }

}
