package Carbon.Recognition;
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

import Carbon.Recognition.Translation.TranslationSynthesisResultEventArgs;
import Carbon.Recognition.Translation.TranslationTextResult;
import Carbon.Recognition.Translation.TranslationTextResultEventArgs;
import Carbon.Util.EventHandler;
import Carbon.Util.EventHandlerImpl;
import Carbon.Util.Task;
import Carbon.Util.TaskRunner;

import java.io.IOException;
import java.util.Vector;

/// <summary>
/// Performs translation on the speech input.
/// </summary>
/// <example>
/// An example to use the translation recognizer on a audio file and listen to events generated by the recognizer.
/// <code>
/// static void MySessionEventHandler(object sender, SessionEventArgs e)
/// {
///    Console.WriteLine(String.Format("Translation recognition: Session event: {0} ", e.ToString()));
/// }
///
/// static void MyIntermediateResultEventHandler(object sender, TranslatioTextResultEventArgs e)
/// {
///    Console.WriteLine(String.Format("Translation recognition: Intermediate result: {0} ", e.ToString()));
/// }
///
/// static void MyFinalResultEventHandler(object sender, TranslationTextResultEventArgs e)
/// {
///    Console.WriteLine(String.Format("Translation recognition: Final result: {0} ", e.ToString()));
/// }
///
/// static void MyErrorHandler(object sender, RecognitionErrorEventArgs e)
/// {
///    Console.WriteLine(String.Format("Translation recognition: Error information: {0} ", e.ToString()));
/// }
///
/// static void TranslationRecognizerSample()
/// {
///   TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
///
///   reco.OnSessionEvent += MySessionEventHandler;
///   reco.FinalResultReceived += MyFinalResultEventHandler;
///   reco.IntermediateResultReceived += MyIntermediateResultEventHandler;
///   reco.RecognitionErrorRaised += MyErrorHandler;
///
///   // Starts recognition.
///   var result = await reco.RecognizeAsync();
///
///   reco.OnSessionEvent -= MySessionEventHandler;
///   reco.FinalResultReceived -= MyFinalResultEventHandler;
///   reco.IntermediateResultReceived -= MyIntermediateResultEventHandler;
///   reco.RecognitionErrorRaised -= MyErrorHandler;
///
///   Console.WriteLine("Translation Recognition: Recognition result: " + result);
/// }
/// </code>
/// </example>
public final class TranslationRecognizer extends Carbon.Recognition.Recognizer
{
    /// <summary>
    /// The event <see cref="IntermediateResultReceived"/> signals that an intermediate recongition result is received.
    /// </summary>
    public EventHandlerImpl<TranslationTextResultEventArgs> IntermediateResultReceived;

    /// <summary>
    /// The event <see cref="FinalResultReceived"/> signals that a final recognition result is received.
    /// </summary>
    public EventHandlerImpl<TranslationTextResultEventArgs> FinalResultReceived;

    /// <summary>
    /// The event <see cref="RecognitionErrorRaised"/> signals that an error occurred during recognition.
    /// </summary>
    public EventHandlerImpl<RecognitionErrorEventArgs> RecognitionErrorRaised;

    /// <summary>
    /// The event <see cref="SynthesisResultReceived"/> signals that a translation synthesis result is received.
    /// </summary>
    public EventHandlerImpl<TranslationSynthesisResultEventArgs> SynthesisResultReceived;

    TranslationRecognizer(Carbon.Internal.TranslationRecognizer recoImpl)
    {
        //this.recoImpl = recoImpl;

        //intermediateResultHandler = new ResultHandlerImpl(this, isFinalResultHandler: false);
        //recoImpl.IntermediateResult.Connect(intermediateResultHandler);

        //finalResultHandler = new ResultHandlerImpl(this, isFinalResultHandler: true);
        //recoImpl.FinalResult.Connect(finalResultHandler);

        //errorHandler = new ErrorHandlerImpl(this);
        //recoImpl.NoMatch.Connect(errorHandler);
        //recoImpl.Canceled.Connect(errorHandler);

        //recoImpl.SessionStarted.Connect(sessionStartedHandler);
        //recoImpl.SessionStopped.Connect(sessionStoppedHandler);
        //recoImpl.SoundStarted.Connect(soundStartedHandler);
        //recoImpl.SoundStopped.Connect(soundStoppedHandler);

        //Parameters = new ParameterCollection<TranslationRecognizer>(this);
        _Parameters = null;
    }

    /// <summary>
    /// Gets/sets the spoken language of audio input.
    /// </summary>
    public String getSourceLanguage()
    {
            return _Parameters.getString(ParameterNames.TranslationFromLanguage);
        }

    public void setSourceLanguage(String value)
    {
            _Parameters.set(ParameterNames.TranslationFromLanguage, value);
    }

    /// <summary>
    /// Gets/sets target languages for translation. The language is specified in BCP-47 format.
    /// The translation will provide translated text for each of language in the specified list.
    /// </summary>
    public Vector<String> getTargetLanguages()
    {
        return _targetLanguages;
    }
    // { get; set; }
    private Vector<String> _targetLanguages = new Vector<String>();

    /// <summary>
    /// Gets/sets a boolean value which indicates whether a voice output of the translated text is desired.
    /// </summary>
    public boolean getIsVoiceOutputDesired()
    {
        return _isVoidOutputDesired;
    };//{ get; set; }
    public void setIsVoiceOutputDesired(boolean value)
    {
        _isVoidOutputDesired = value;
    };//{ get; set; }
    private boolean _isVoidOutputDesired;
    
    /// <summary>
    /// The collection of parameters and their values defined for this <see cref="TranslationRecognizer"/>.
    /// </summary>
    public final Carbon.ParameterCollection<TranslationRecognizer> getParameters()
    {
        return _Parameters;
    }; // { get; }
    Carbon.ParameterCollection<TranslationRecognizer> _Parameters;

    /// <summary>
    /// Starts recognition and translation, and stops after the first utterance is recognized. The task returns the translation text as result.
    /// </summary>
    /// <returns>A task representing the recognition operation. The task returns a value of <see cref="TranslationTextResult"/> </returns>
    /// <example>
    /// Create a translation recognizer, get and print the recognition result
    /// <code>
    /// static void TranslationRecognizerSample()
    /// {
    ///   TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
    ///
    ///   // Starts recognition.
    ///   var result = await reco.RecognizeAsync();
    ///
    ///   Console.WriteLine("Translation Recognition: Recognition result: " + result);
    /// }
    /// </code>
    /// </example>
    public Task<TranslationTextResult> recognizeAsync()
    {
        Task<TranslationTextResult> t = new Task<TranslationTextResult>(new TaskRunner() {
            TranslationTextResult result;
            
            @Override
            public void run() {
                result = new TranslationTextResult(recoImpl.recognize());
            }

            @Override
            public Object result() {
                return result;
            }});

        return t;
    }

    /// <summary>
    /// Starts recognition and translation on a continous audio stream, until StopContinuousRecognitionAsync() is called.
    /// User must subscribe to events to receive translation results.
    /// </summary>
    /// <returns>A task representing the asynchronous operation that starts the recognition.</returns>
    public Task<?> startTranslationRecognizer()
    {
        Task<?> t = new Task(new TaskRunner() {

            @Override
            public void run() {
                recoImpl.startContinuousRecognition();
            }

            @Override
            public Object result() {
                return null;
            }});
        return t;
    }

    /// <summary>
    /// Stops continuous recognition and translation.
    /// </summary>
    /// <returns>A task representing the asynchronous operation that stops the translation.</returns>
    public Task<?> stopContinuousRecognitionAsync()
    {
        Task<?> t = new Task(new TaskRunner() {

            @Override
            public void run() {
                recoImpl.stopContinuousRecognition();
            }

            @Override
            public Object result() {
                return null;
            }});

        return t;
    }

    @Override
    protected void dispose(boolean disposing) throws IOException
    {
        if (disposed)
        {
            return;
        }

        if (disposing)
        {
            recoImpl.getIntermediateResult().removeEventListener(intermediateResultHandler);
            recoImpl.getFinalResult().removeEventListener(finalResultHandler);
            recoImpl.getNoMatch().removeEventListener(errorHandler);
            recoImpl.getCanceled().removeEventListener(errorHandler);
            recoImpl.getSessionStarted().removeEventListener(sessionStartedHandler);
            recoImpl.getSessionStopped().removeEventListener(sessionStoppedHandler);

            //intermediateResultHandler.Dispose();
            //finalResultHandler.Dispose();
            //errorHandler.Dispose();
            //recoImpl.Dispose();
            _Parameters.close();
            disposed = true;
            super.dispose(disposing);
        }
    }

    Carbon.Internal.TranslationRecognizer recoImpl;
    private ResultHandlerImpl intermediateResultHandler;
    private ResultHandlerImpl finalResultHandler;
    private ErrorHandlerImpl errorHandler;
    private boolean disposed = false;

    // Defines an internal class to raise a C# event for intermediate/final result when a corresponding callback is invoked by the native layer.
    private class ResultHandlerImpl extends Carbon.Internal.TranslationTexEventListener
    {
        public ResultHandlerImpl(TranslationRecognizer recognizer, boolean isFinalResultHandler)
        {
            this.recognizer = recognizer;
            this.isFinalResultHandler = isFinalResultHandler;
        }

        @Override
        public void execute(Carbon.Internal.TranslationTextResultEventArgs eventArgs)
        {
            if (recognizer.disposed)
            {
                return;
            }

            TranslationTextResultEventArgs resultEventArg = null; // = new TranslationTextResultEventArgs(eventArgs);
            EventHandlerImpl<TranslationTextResultEventArgs> handler = isFinalResultHandler ? recognizer.FinalResultReceived : recognizer.IntermediateResultReceived;
            if (handler != null)
            {
                handler.fireEvent(this.recognizer, resultEventArg);
            }
        }

        private TranslationRecognizer recognizer;
        private boolean isFinalResultHandler;
    }

    // Defines an internal class to raise a C# event for error during recognition when a corresponding callback is invoked by the native layer.
    private class ErrorHandlerImpl extends Carbon.Internal.TranslationTexEventListener
    {
        public ErrorHandlerImpl(TranslationRecognizer recognizer)
        {
            this.recognizer = recognizer;
        }

        @Override
        public void execute(Carbon.Internal.TranslationTextResultEventArgs eventArgs)
        {
            Carbon.Internal.TranslationTexEventListener a = new Carbon.Internal.TranslationTexEventListener();
            if (recognizer.disposed)
            {
                return;
            }

            RecognitionErrorEventArgs resultEventArg = null; // new RecognitionErrorEventArgs(eventArgs.SessionId, eventArgs.Result.Reason);
            EventHandlerImpl<RecognitionErrorEventArgs> handler = this.recognizer.RecognitionErrorRaised;

            if (handler != null)
            {
                handler.fireEvent(this.recognizer, resultEventArg);
            }
        }

        private TranslationRecognizer recognizer;
    }
}
