parameters:
  continueOnTestFailure: false
  buildType: dev

jobs:
- job: OsxPythonBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' OsxPythonBuild '))
  pool:
    name: Hosted macOS Preview
  timeoutInMinutes: 60
  strategy:
    maxParallel: 1
    matrix:
      Python3.5:
        PythonVersion: 3.5
        pythonIncludePathSuffix: python3.5m
      # More configurations in 'int' and 'prod' builds:
      ${{ if in(parameters.buildType, 'int', 'prod') }}:
        Python3.7:
          PythonVersion: 3.7
          pythonIncludePathSuffix: python3.7m
        Python3.6:
          PythonVersion: 3.6
          pythonIncludePathSuffix: python3.6m
  variables:
    BuildConfiguration: Release
    BuildPlatform: x64
    WheelParams: "--plat-name macosx-10.12-x86_64"
    OutputDirectory: "$(Build.ArtifactStagingDirectory)/wheelhouse"
  steps:
  # Update bash really early so it will be picked up by "bash" steps.
  - bash: brew config && brew install bash
    displayName: Install modern bash
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set OSX-x64 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM OSX-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
        vsts_setvar SPEECHSDK_PYTHON_PLATFORM "$(BuildPlatform)"
        vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Unix Makefiles"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - template: build-python-wheel.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      pythonIncludePathSuffix: $(PythonIncludePathSuffix)
      wheelParams: $(WheelParams)
      postbuildsteps:
        - bash: |
            set -u -x -e -o pipefail
            unstrippedLib="$(OutputDirectory)/libunstripped-$(SPEECHSDK_TARGET_PLATFORM)-$(BuildConfiguration)-py$(PythonVersion)"
            mkdir -p "$unstrippedLib"
            wheel=(build/*.whl)
            [[ ${#wheel[@]} = 1 ]]
            mkdir repack # error out if existing
            unzip -d repack "${wheel[0]}"
            # archive the unstripped python bindings lib
            pythonExtension=(repack/azure_cognitiveservices_speech-*/data/lib/python*/site-packages/azure/cognitiveservices/speech/_speech_py_impl.so)
            [[ ${#pythonExtension[@]} = 1 ]]
            cp -p "${pythonExtension[0]}" "$unstrippedLib"
            strip -x "${pythonExtension[0]}"
            # archive the unstripped core lib
            coreLib=(repack/azure_cognitiveservices_speech-*/data/lib/python*/site-packages/azure/cognitiveservices/speech/libMicrosoft.CognitiveServices.Speech.core.dylib)
            [[ ${#coreLib[@]} = 1 ]]
            cp -p "${coreLib[0]}" "$unstrippedLib"
            strip -x "${coreLib[0]}"
            python -m wheel pack --dest-dir build repack
            rm -rf repack
            # ESRP wants a .zip extension
            [[ $SPEECHSDK_SIGN != true ]] || cp -p "${wheel[0]}"{,.zip}
          displayName: Repack .whl, strip library, keep original
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: Sign .so (dynamic library) in .whl
          inputs:
            ConnectedServiceName: Speech SDK ESRP Signing
            FolderPath: build
            Pattern: '*.zip'
            signConfigType: inlineSignParams
            inlineOperation: $(SIGN_PARAMS_MACOS)
          condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
        - bash: |
            set -u -x -e -o pipefail
            wheel=(build/*.whl)
            mv "${wheel[0]}"{.zip,}
            mkdir repack # error out if existing
            # Not using 'wheel unpack' to avoid error on hash mismatch:
            unzip -d repack "${wheel[0]}"
            [[ $SPEECHSDK_SIGN != true ]] ||
               find repack -name \*.dylib -or -name \*.so -print0 | xargs -0 -n1 codesign --display --verbose=4
            python -m wheel pack --dest-dir build repack
            rm -rf repack
          condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
          displayName: Rename .whl.zip to .whl and repack
