jobs:
- job: LinuxPythonBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxPythonBuild '))
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 60
  strategy:
    maxParallel: 2
    matrix:
      Python3.5:
        PythonVersion: 3.5
        pythonIncludePathSuffix: python3.5m
        WheelPythonTag: cp35
      Python3.6:
        PythonVersion: 3.6
        pythonIncludePathSuffix: python3.6m
        WheelPythonTag: cp36
      # Python 3.5 and 3.6 we need for end-to-end test on Ubuntu 16.04 and 18.04, respectively.
      # Python 3.6 is also used for docs generation (BuildPythonDocs job).
      # 'int' and 'prod' builds have Python 3.7 in addition:
      ${{ if and(eq(variables['System.CollectionId'], '19422243-19b9-4d85-9ca6-bc961861d287'), eq(variables['System.DefinitionId'], '4833'), or(and(or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.Reason'], 'Manual')), eq(variables['Build.SourceBranch'], 'refs/heads/master')), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))) }}:
        Python3.7:
          PythonVersion: 3.7
          pythonIncludePathSuffix: python3.7m
          WheelPythonTag: cp37
  variables:
    BuildConfiguration: Release
    BuildPlatform: x64
    OutputDirectory: "$(Build.ArtifactStagingDirectory)/wheelhouse"
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Linux-x64 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM Linux-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
        vsts_setvar SPEECHSDK_PYTHON_PLATFORM "$(BuildPlatform)"
        vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Unix Makefiles"
        vsts_setvar SPEECHSDK_ENABLE_KWS false
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - template: get-kws-artifact.yml
    parameters:
      enableVariable: SPEECHSDK_ENABLE_KWS
      os: Linux
  - template: build-python-wheel.yml
    parameters:
      pythonIncludePathSuffix: $(PythonIncludePathSuffix)
      buildParams: -DEXTENSION_KWS_ENABLED=$(SPEECHSDK_ENABLE_KWS)
      wheelParams: "--plat-name=manylinux1_x86_64 --python-tag=$(WheelPythonTag)"
      postbuildsteps:
        - bash: |
            set -u -x -e -o pipefail
            unstrippedLib="$(OutputDirectory)/libunstripped-$(SPEECHSDK_TARGET_PLATFORM)-$(BuildConfiguration)-py$(PythonVersion)"
            mkdir -p "$unstrippedLib"
            wheel=(build/*.whl)
            [[ ${#wheel[@]} = 1 ]]
            unzip -d repack "${wheel[0]}"
            sharedLibs=(repack/azure_cognitiveservices_speech-*/data/lib/python*/site-packages/azure/cognitiveservices/speech/*.so)
            [[ ${#sharedLibs[@]} = 1 ]]
            cp --preserve "${sharedLibs[@]}" "$unstrippedLib"
            strip "${sharedLibs[@]}"
            cd repack
            wheelDirName=(azure_cognitiveservices_speech-*.data/)
            [[ ${#wheelDirName[@]} = 1 ]]
            mv ${wheelDirName}/data/lib/python*/site-packages ${wheelDirName}/platlib
            rm -rf ${wheelDirName}/data
            wheel pack --dest-dir ../build .
          displayName: Repack .whl with unstripped library, keep original
