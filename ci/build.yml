# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.
#
# If you run into issue wrt. referenced resources when settings this build up, cf. here:
#   https://github.com/Microsoft/vsts-agent/issues/1301 wrt. ConnectedServiceName
#
# TODO describe parameters
resources:
- repo: self
  clean: true

variables:
  SIGN_PARAMS_JAVA: |
    [
      {
        "keyCode": "CP-232612-Java",
        "operationSetCode": "JavaSign",
        "parameters": [
        {
          "parameterName": "SigAlg",
          "parameterValue": "SHA256withRSA"
        },
        {
          "parameterName": "Timestamp",
          "parameterValue": "-tsa http://sha256timestamp.ws.symantec.com/sha256/timestamp"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
      },
      {
        "keyCode": "CP-232612-Java",
        "operationSetCode": "JavaVerify",
        "parameters": [ ],
        "toolName": "sign",
        "toolVersion": "1.0"
      }
    ]
  SIGN_PARAMS_DLL: |
    [
      {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [
          {
            "parameterName": "OpusName",
            "parameterValue": "Microsoft"
          },
          {
            "parameterName": "OpusInfo",
            "parameterValue": "http://www.microsoft.com"
          },
          {
            "parameterName": "PageHash",
            "parameterValue": "/NPH"
          },
          {
            "parameterName": "FileDigest",
            "parameterValue": "/fd sha256"
          },
          {
            "parameterName": "TimeStamp",
            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
          }
        ],
        "toolName": "signtool.exe",
        "toolVersion": "6.2.9304.0"
      },
      {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolVerify",
          "parameters": [ ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
       }
    ]
  SPEECHSDK_MAVEN_ARTIFACT_ID: client-sdk
  SPEECHSDK_MAVEN_GROUP_ID: com.microsoft.cognitiveservices.speech
  SPEECHSDK_NUGET_VERSION: 4.6

phases:

- phase: Pre
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 30
  steps:
  - task: Bash@3
    name: var
    inputs:
      filePath: ci/set-variables.sh
    displayName: Set variables
  - task: Bash@3
    inputs:
      targetType: inline
      script: |
        . ci/functions.sh
        vsts_updatebuildnumber $(SPEECHSDK_SEMVER2NOMETA)
        vsts_addbuildtag $(SPEECHSDK_BUILD_TYPE)
  - task: Bash@3
    inputs:
      filePath: ci/check-git-head.sh
    displayName: Repository checks

- phase: WindowsSdlBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsSdlBuild '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 120
  variables:
    BuildPlatform: x64
    BuildConfiguration: Release
    SPEECHSDK_BUILD_PHASES: $[ dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'] ]
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        TARGET=Windows-x64
        [[ "$(BuildPlatform)" == Win32 ]] && TARGET=Windows-x86
        vsts_setvar SPEECHSDK_TARGET_PLATFORM "$TARGET"
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install build dependencies
    inputs:
      type: FilePath
      scriptPath: 'ci/install-build-dependencies.sh'
  # TODO detect installation failures, export diagnostics. For now, we'll fail in msbuild a little bit down.
  - powershell: |
      Invoke-WebRequest -OutFile vs_enterprise.exe https://aka.ms/vs/15/release/vs_enterprise.exe
      Start-Process -Wait cmd -Verb runas -ArgumentList /c, cd, (Get-Location), '&&', start, /wait, .\vs_enterprise.exe, modify, --installPath, '"%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Enterprise"', --add, Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre, --quiet, --norestart, --wait, '&&', echo, '%ERRORLEVEL%', '>', result.txt
    displayName: Install Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre VS component
    condition: and(succeeded(),eq(variables['SPEECHSDK_SPECTRE_MITIGATION'],'true'))
  - task: CmdLine@1
    displayName: Generate set_cmake_arch.bat
    inputs:
      filename: echo
      arguments: 'IF $(BuildPlatform)==x64 (set CMakeArch=15 Win64) ELSE (set CMakeArch=15) > set_cmake_arch.bat'
      failOnStandardError: true
  - task: BatchScript@1
    displayName: Run set_cmake_arch.bat
    inputs:
      filename: 'set_cmake_arch.bat'
      modifyEnvironment: true
      failOnStandardError: true
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - task: CMake@1
    displayName: Generate solution
    inputs:
      workingDirectory: 'build/$(BuildPlatform)'
      cmakeArgs: '-G "Visual Studio $(CMakeArch)" -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION) ../..'
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/$(BuildPlatform)/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
      # Needed for SDL:
      createLogFile: true
  # Checks BEGIN
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'BinSkim (can pass only with Spectre mitigation)'
    inputs:
      arguments: 'analyze build/$(BuildPlatform)/bin/$(BuildConfiguration)/*.dll --recurse'
    condition: and(succeeded(),eq(variables['SPEECHSDK_SPECTRE_MITIGATION'],'true'))
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'AntiMalware'
    inputs:
      FileDirPath: '.'
      EnableServices: true
      SignatureFreshness: ThreeDays
      TreatStaleSignatureAs: Warning
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-apiscan.APIScan@1
    displayName: 'APIScan'
    inputs:
      softwareName: 'Cognitive Services Speech SDK'
      softwareVersionNum: 1.0
      isLargeApp: false
    enabled: false
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'CredScan (source-scan, dir: all)'
    inputs:
      suppressionsFile: 'ci/sdl/LocalSuppression.json'
      debugMode: false
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'PoliCheck (source-scan, dir: source)'
    inputs:
      targetType: F
      targetArgument: 'source'
      result: PoliCheckSource.xml
      optionsFC: 1
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'PoliCheck (source-scan, dir: public samples)'
    inputs:
      targetType: F
      targetArgument: 'public_samples'
      termTypeT: 0001aCustom
      result: PoliCheckSamples.xml
      SOMEnabled: true
      optionsFC: 1
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-fxcop.FxCop@2
    displayName: 'Run FxCop'
    inputs:
      inputType: Basic
      targets: 'build/$(BuildPlatform)/bin/$(BuildConfiguration)/net461'
      disableRules: 'Microsoft.Globalization#CA2101'
      verbose: true
  - bash: rm -rf build/$(BuildPlatform)/source/bindings/java/javadoc
    displayName: Remove JavaDoc folder
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-moderncop.ModernCop@2
    displayName: 'ModernCop (managed JS code)'
    inputs:
      InputType: Basic
      OutputFormat: red
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'Run AutoApplicability'
    inputs:
      ApplyRules: All
      ExternalRelease: true
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-tslint.TSLint@1
    displayName: 'Run TSLint'
    inputs:
      Ruleset: custom
      RulesetFile: source/bindings/js/tslint.json
      Files: source/**/*.ts
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-prefast.SDLNativeRules@2
    displayName: 'Run the PREfast SDL Native Rules for MSBuild'
  # Checks END
  # Publish artifact and fail the build if necessary
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'
    inputs:
      AllTools: true
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'SDL: Post Analysis (w/o TsaUpload)'
    inputs:
      AllTools: true
    continueOnError: false
    condition: not(contains(variables['SPEECHSDK_BUILD_PHASES'], ' TsaUpload '))
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'SDL: Post Analysis (w/ TsaUpload)'
    inputs:
      AllTools: true
    continueOnError: true
    condition: contains(variables['SPEECHSDK_BUILD_PHASES'], ' TsaUpload ')

- phase: TsaUpload
  dependsOn: [Pre, WindowsSdlBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' TsaUpload '))
  queue:
    name: Carbon
    timeoutInMinutes: 30
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading CodeAnalysisLogs artifacts'
    inputs:
      artifactName: CodeAnalysisLogs
      downloadPath: $(System.ArtifactsDirectory)/In
  - powershell: |
      $logDir = "$(Agent.BuildDirectory)/_sdt/logs"
      if (Test-Path $logDir) {
        Remove-Item -Recurse -Force $logDir
      }
      if (-not (Test-Path (Split-Path $logDir))) {
        New-Item -ItemType Directory (Split-Path $logDir)
      }
      Move-Item $(System.ArtifactsDirectory)/In/CodeAnalysisLogs $logDir
    displayName: Move logs to target location
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload to Codebase: Carbon_master Stamp: Bing'
    inputs:
      tsaStamp: Bing
      codeBaseName: 'Carbon_master'
    # TODO or fail on error?
    continueOnError: true
    condition: succeededOrFailed()

- phase: WindowsBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsBuild '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 40
    parallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        TARGET=Windows-x64
        [[ "$(BuildPlatform)" == Win32 ]] && TARGET=Windows-x86
        vsts_setvar SPEECHSDK_TARGET_PLATFORM "$TARGET"
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: . ./ci/functions.sh && vsts_setvar SPEECHSDK_SPECTRE_MITIGATION false
    displayName: Reset SPEECHSDK_SPECTRE_MITIGATION in Debug
    condition: eq(variables['BuildConfiguration'], 'Debug')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install build dependencies
    inputs:
      type: FilePath
      scriptPath: 'ci/install-build-dependencies.sh'
  # TODO detect installation failures, export diagnostics. For now, we'll fail in msbuild a little bit down.
  - powershell: |
      Invoke-WebRequest -OutFile vs_enterprise.exe https://aka.ms/vs/15/release/vs_enterprise.exe
      Start-Process -Wait cmd -Verb runas -ArgumentList /c, cd, (Get-Location), '&&', start, /wait, .\vs_enterprise.exe, modify, --installPath, '"%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Enterprise"', --add, Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre, --quiet, --norestart, --wait, '&&', echo, '%ERRORLEVEL%', '>', result.txt
    displayName: Install Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre VS component
    condition: eq(variables['SPEECHSDK_SPECTRE_MITIGATION'],'true')
  - task: CmdLine@1
    displayName: Generate set_cmake_arch.bat
    inputs:
      filename: echo
      arguments: 'IF $(BuildPlatform)==x64 (set CMakeArch=15 Win64) ELSE (set CMakeArch=15) > set_cmake_arch.bat'
      failOnStandardError: true
  - task: BatchScript@1
    displayName: Run set_cmake_arch.bat
    inputs:
      filename: 'set_cmake_arch.bat'
      modifyEnvironment: true
      failOnStandardError: true
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - task: CMake@1
    displayName: Generate solution
    inputs:
      workingDirectory: 'build/$(BuildPlatform)'
      cmakeArgs: '-G "Visual Studio $(CMakeArch)" -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION) ../..'
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/$(BuildPlatform)/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Windows C++, C# and Java binaries'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/$(BuildPlatform)/bin'
      Pattern: 'Microsoft.CognitiveServices.Speech.core.dll,Microsoft.CognitiveServices.Speech.csharp.bindings.dll,Microsoft.CognitiveServices.Speech.csharp.dll,Microsoft.CognitiveServices.Speech.java.bindings.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  # If we failed until here, don't try to run tests:
  - bash: . ci/functions.sh && vsts_setvar SPEECHSDK_RUN_TESTS false
    condition: failed()
  - bash: ./ci/set-test-variables.sh
    displayName: Set test variables
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Unit tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/rununittest.sh'
      args: './bin/$(BuildConfiguration) $(KeySpeech) $(KeyCris) $(KeyLuis) $(KeySkyman)'
      cwd: 'build/$(BuildPlatform)'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Carbonx tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_carbonx.sh'
      args: './bin/$(BuildConfiguration) all $(KeySkyman) westus $(KeyLuis) westus2'
      cwd: 'build/$(BuildPlatform)'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: UspConsole tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_uspconsole.sh'
      args: './bin/$(BuildConfiguration) $(KeySkyman)'
      cwd: 'build/$(BuildPlatform)'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Carbon CSharp tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_carbon_csharp_console.sh'
      args: './bin/$(BuildConfiguration) all $(KeySkyman)'
      cwd: 'build/$(BuildPlatform)'
    condition: and(eq(variables['BuildConfiguration'], 'Release'),eq(variables['SPEECHSDK_RUN_TESTS'],'true'))
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Run Java (JUnit) tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/runjava.sh'
      args: '$(Build.Repository.LocalPath) ./ $(BuildConfiguration) $(KeySpeech) $(KeyCris) $(KeyLuis) $(KeySkyman)'
      cwd: 'build/$(BuildPlatform)'
    condition: and(eq(variables['BuildConfiguration'], 'Release'), eq(variables['BuildPlatform'], 'x64'),eq(variables['SPEECHSDK_RUN_TESTS'],'true'))
    timeoutInMinutes: 7
  - task: VSTest@1
    displayName: Run C# tests
    inputs:
      testAssembly: '**\Microsoft.CognitiveServices.Speech.Tests*.dll;-:**\obj\**'
      runSettingsFile: 'tests/functional/csharp/end2end/csharp.runsettings'
      overrideTestrunParameters: 'UnifiedSpeechSubscriptionKey=$(KeySkyman);Region=westus;InputDir=$(Build.Repository.LocalPath)/tests/input;DeploymentId=$(TEST_MODEL_ID)'
      runInParallel: False
      vsTestVersion: latest
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '$(BuildPlatform) $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)'
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Windows
      publishLocation: Container

- phase: WindowsUwpBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsBuild '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 30
    parallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        TARGET=WindowsUwp-x64
        [[ "$(BuildPlatform)" == Win32 ]] && TARGET=WindowsUwp-x86
        vsts_setvar SPEECHSDK_TARGET_PLATFORM "$TARGET"
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: |
      set -e -o pipefail
      . ci/functions.sh
      ./ci/set-variables.sh
      SPEECHSDK_CMAKE_GENERATOR="Visual Studio 15"
      [[ "$(BuildPlatform)" == x64 ]] && SPEECHSDK_CMAKE_GENERATOR+=" Win64"
      vsts_setvar SPEECHSDK_CMAKE_GENERATOR "$SPEECHSDK_CMAKE_GENERATOR"
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install build dependencies
    inputs:
      type: FilePath
      scriptPath: 'ci/install-build-dependencies.sh'
  - task: CMake@1
    displayName: Generate solution
    inputs:
      workingDirectory: 'build/$(BuildPlatform)'
      cmakeArgs: '-G "$(SPEECHSDK_CMAKE_GENERATOR)" -Duse_default_uuid=ON -Duse_builtin_httpapi=ON -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -Dskip_samples=ON -Duse_openssl=ON -Duse_schannel=OFF -DOPENSSL_ROOT_DIR=../../external/uwp_ssl/lib/$(BuildPlatform) -DOPENSSL_INCLUDE_DIR=../../external/uwp_ssl/include -DOPENSSL_USE_STATIC_LIBS=TRUE -DBUILD_PYTHON=OFF ../..'
  - task: NuGetCommand@2
    displayName: NuGet restore
    inputs:
      restoreSolution: 'build/$(BuildPlatform)/carbon.sln'
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/$(BuildPlatform)/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Windows C++ and C# binaries'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/$(BuildPlatform)/bin/$(BuildConfiguration)'
      Pattern: 'Microsoft.CognitiveServices.Speech.core.uwp.dll,Microsoft.CognitiveServices.Speech.csharp.bindings.uwp.dll,Microsoft.CognitiveServices.Speech.csharp.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '$(BuildPlatform) $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration) UWP'
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: WindowsUwp
      publishLocation: Container

# Note: for now this packages up only {Linux,Windows}-x64-Release
- phase: JavaJrePackage
  dependsOn: [Pre, LinuxBuild, WindowsBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JavaJrePackage '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 30
  steps:
  - bash: |
      set -x -e -o pipefail
      ./ci/set-variables.sh
      ./ci/set-test-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=JavaJrePackage
      ArtifactOutWindows="$(Build.ArtifactStagingDirectory)/Out/$PublishArtifactName"
      ArtifactOut="$(cygpath -au "$ArtifactOutWindows")"
      ArtifactBasename="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA)"
      MavenRoot="$ArtifactOut/maven"
      MavenRootWindows="$ArtifactOutWindows/maven"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      MavenPackageDir="$MavenRoot/$relativeMavenPackageDir"
      MavenPackageDirWindows="$MavenRootWindows/$relativeMavenPackageDir"
      vsts_setvars_by_ref PublishArtifactName Artifact{Out{,Windows},Basename} Maven{Root,PackageDir}{,Windows}
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Linux artifacts'
    inputs:
      artifactName: Linux
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      ./ci/jre/build-jar.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)")"/In
  # Note: doc says "The file extension should match the selected archive type." - so we are renaming afterwards
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/jre/jar'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename).zip'
    displayName: 'Create .zip'
  - bash: |
      set -x -e -o pipefail
      mkdir -p "$(MavenPackageDir)"
      mv "$(ArtifactOut)/$(ArtifactBasename).zip" "$(MavenPackageDir)/$(ArtifactBasename).jar"
    displayName: 'Rename .zip -> .jar, place'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign *.jar'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(MavenRootWindows)'
      Pattern: '*.jar'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      ./ci/run-maven.sh public_samples "$(MavenRoot)"
    displayName: Build Maven-based samples
  - bash: |
       set -x
       java \
        -cp $(printf "%s;" \
           "$(MavenPackageDirWindows)/$(ArtifactBasename).jar" \
           "$(Build.ArtifactStagingDirectory)/In/Windows/x64/Release/private/bin/com.microsoft.cognitiveservices.speech.tests.jar" \
           "external/junit/junit-4.12.jar" \
           "external/junit/hamcrest-core-1.3.jar") \
         -DSpeechSubscriptionKey=$(KeySkyman) \
         -DSpeechRegion=westus \
         -DLuisRegion=westus2 \
         -DWaveFile=$TEST_AUDIO_FILE \
         -DKeyword=Computer \
         -DKeywordModel=/data/keyword/kws.table \
         -DTestOutputFilename=test-java-unittests-package.xml \
         tests.runner.Runner \
         tests.AllTests
    displayName: Run unit test
  # TODO more - e.g. POM?
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out/$(PublishArtifactName)'
      ArtifactName: $(PublishArtifactName)
      publishLocation: Container
    displayName: 'Publish .jar'
    condition: succeededOrFailed()

- phase: JavaJrePackageLinuxTest
  dependsOn: [Pre, JavaJrePackage]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JavaJrePackage '))
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 30
  steps:
  - bash: './ci/set-variables.sh && ./ci/set-test-variables.sh'
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=JavaJrePackage
      ArtifactIn="$(Build.ArtifactStagingDirectory)/In/$PublishArtifactName"
      MavenRoot="$ArtifactIn/maven"
      JarName="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA).jar"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      PathToJar="$MavenRoot/$relativeMavenPackageDir/$JarName"
      vsts_setvars_by_ref PublishArtifactName ArtifactIn MavenRoot JarName PathToJar
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading JavaJrePackage artifacts'
    inputs:
      artifactName: $(PublishArtifactName)
      downloadPath: $(Build.ArtifactStagingDirectory)/In
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      java -version
      find public_samples/quickstart/java-jre -name \*.java -print0 | xargs -0 perl -i -pe 's("YourServiceRegion")("westus")'
      find public_samples/quickstart/java-jre -name \*.java -print0 | xargs -0 perl -i -pe 's("YourSubscriptionKey")("'$(KeySkyman)'")'
      ./ci/run-maven.sh public_samples "$(MavenRoot)"
    displayName: Patch and build samples
  - bash: |
      set -e -x -o pipefail
      DOCKER_TAG=csspeechdev_linuxoobejre_x64
      DOCKER_DIR=./ci/docker/linuxoobejre/x64
      ./ci/docker/build-image.sh "$DOCKER_TAG" "$DOCKER_DIR"
      cp "$(PathToJar)" $(Build.Repository.LocalPath)
      docker run --rm --volume "$(Build.Repository.LocalPath):/test:ro" --workdir /test "$DOCKER_TAG" ./ci/run-with-pulseaudio.sh \
        /test/tests/input/audio/whatstheweatherlike.wav \
        java -cp ./public_samples/quickstart/java-jre/target/quickstart-eclipse-1.0.0-SNAPSHOT.jar:/test/"$(JarName)" speechsdk.quickstart.Main
    displayName: Test quickstart-jre
- phase: NuGet
  dependsOn: [Pre, LinuxBuild, LinuxX86Build, WindowsBuild, WindowsUwpBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsNuGet '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 30
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)\In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Linux artifacts'
    inputs:
      artifactName: Linux
      downloadPath: $(System.ArtifactsDirectory)\In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading WindowsUwp artifacts'
    inputs:
      artifactName: WindowsUwp
      downloadPath: $(System.ArtifactsDirectory)\In
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - bash: |
      . ci/functions.sh
      vsts_setvar ZipBasename "SpeechSDK-Samples-$(SPEECHSDK_SEMVER2NOMETA)"
    displayName: 'Set variables'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    inputs:
      type: FilePath
      scriptPath: './ci/nuget/pack.sh'
      args: '$(System.ArtifactsDirectory)\In $(SPEECHSDK_SEMVER2NOMETA) $(Build.ArtifactStagingDirectory)\Windows'
    displayName: Create NuGet
  # We could / should generate this elsewhere? Doesn't only apply to Windows + NuGet anymore...
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    inputs:
      type: InlineScript
      script: |
         set -e -x -o pipefail
         # Drop is not needed anymore
         rm -rf "$(cygpath -au "$(System.ArtifactsDirectory)\In")"
         git clean -fdx public_samples
         perl ci/patch-samples.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
         cp --verbose --recursive --preserve public_samples "$(ZipBasename)"
         NOW=$(date -Iseconds)
         find "$(ZipBasename)" | xargs touch --date=$NOW
    displayName: 'Create directory with patched samples'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(ZipBasename)
      includeRootFolder: true
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/Windows/$(ZipBasename).zip
    displayName: 'Create .zip'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    inputs:
      type: InlineScript
      script: |
         ./ci/nuget/restore-from-local.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)/Windows")" public_samples
    displayName: 'Test - restore packages'
  # Note: for now building any platform. In the future, should build all available.
  - task: VSBuild@1
    inputs:
      solution: 'public_samples/**/*.sln'
      maximumCpuCount: true
    displayName: 'Test - build solutions'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(Build.ArtifactStagingDirectory)/Windows'
      Pattern: '*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: |
        [
          {
            "keyCode": "CP-401405",
            "operationSetCode": "NuGetSign",
            "parameters": [ ],
            "toolName": "sign",
            "toolVersion": "1.0"
          },
          {
            "keyCode": "CP-401405",
            "operationSetCode": "NuGetVerify",
            "parameters": [ ],
            "toolName": "sign",
            "toolVersion": "1.0"
          }
        ]
    condition: eq(variables['SPEECHSDK_SIGN'], 'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    enabled: false
    inputs:
      type: InlineScript
      script: |
         . ci/functions.sh
         set -e -o pipefail
         SHA256_SUM="$(sha256sum "$(cygpath -au "$(Build.ArtifactStagingDirectory)/$(ZipBasename).zip")" | cut -f1 -d' ')"
         # N.B. two spaces in the next line intentional
         echo "$SHA256_SUM  $(ZipBasename).zip"
         vsts_setvar SAMPLES_SHA256SUM "$SHA256_SUM"
         # checksum is not yet used...
    displayName: 'Compute SHA256 for .zip'
  - task: NuGetCommand@2
    displayName: NuGet push to VSTS feed
    inputs:
      command: push
      publishVstsFeed: $(SPEECHSDK_VSTS_FEED)
    condition: eq(variables['SPEECHSDK_NUGET_VSTS_PUSH'],'true')
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Windows'
      ArtifactName: Windows
      publishLocation: Container
    condition: succeededOrFailed()
    displayName: 'Publish .zip and .nupkg'

- phase: NuGetLinuxTest
  dependsOn: [Pre, NuGet]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsNuGet '))
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 30
  steps:
  - bash: './ci/set-variables.sh && ./ci/set-test-variables.sh'
    displayName: Set variables
  - task: DownloadBuildArtifacts@0
    displayName: Downloading Windows artifacts
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      perl ci/patch-samples.pl "$(SPEECHSDK_SEMVER2NOMETA)" tests/functional/csharp/end2end/
      # dotnet test does not allow to supply TestRunParameters from command-line?!
      perl -pi - tests/functional/csharp/end2end/csharp.runsettings <<"SCRIPT"
        BEGIN {
          %A = qw(UnifiedSpeechSubscriptionKey $(KeySkyman) Region westus DeploymentId $(TEST_MODEL_ID) InputDir /test/tests/input/);
          $keysRe = "(?:\\b" . (join "\\b|\\b", keys %A) . "\\b)";
          $keysRe = qr/$keysRe/;
        }
        s/(<Parameter name="($keysRe)" value=")([^"]*)/$1.$A{$2}/ge
      SCRIPT
      find public_samples/quickstart/csharp-dotnetcore -name \*.cs -print0 | xargs -0 perl -i -pe 's("YourServiceRegion")("westus")'
      find public_samples/quickstart/csharp-dotnetcore -name \*.cs -print0 | xargs -0 perl -i -pe 's("YourSubscriptionKey")("'$(KeySkyman)'")'
      mkdir localnuget
      cp --verbose $(System.ArtifactsDirectory)/In/Windows/Microsoft.CognitiveServices.Speech.*.nupkg localnuget
      DOCKER_TAG=csspeechdev_linuxoobenetcore20_x64
      DOCKER_DIR=./ci/docker/linuxoobenetcore20/x64
      ./ci/docker/build-image.sh "$DOCKER_TAG" "$DOCKER_DIR"
      # First run the unit tests
      docker run --rm -i --volume "$(Build.Repository.LocalPath):/test" --workdir /test "$DOCKER_TAG" bash - <<"SCRIPT"
        set -e -x -o pipefail
        cd tests/functional/csharp/end2end
        dotnet restore --no-cache --source https://api.nuget.org/v3/index.json --source /test/localnuget Microsoft.CognitiveServices.Speech.Tests.EndToEnd.csproj
        dotnet test --framework netcoreapp2.0 --settings csharp.runsettings --logger 'trx;LogFileName=TEST-csharp-end2end-for-nupkg.trx'
      SCRIPT
      # Then run the end-to-end for the quickstart
      docker run --rm -i --volume "$(Build.Repository.LocalPath):/test" --workdir /test "$DOCKER_TAG" bash - <<"SCRIPT"
        set -e -x -o pipefail
        PATH_TO_AUDIO=/test/tests/input/audio/whatstheweatherlike.wav
        cd public_samples/quickstart/csharp-dotnetcore
        dotnet restore --no-cache --source /test/localnuget helloworld/helloworld.csproj
        dotnet build helloworld/helloworld.csproj
        pulseaudio -D --exit-idle-time=-1
        sleep 1.5
        pactl load-module module-null-sink sink_name=MicOutput sink_properties=device.description=Virtual_Microphone_Output
        pacmd load-module module-virtual-source source_name=VirtualMic
        trap 'pulseaudio --kill' EXIT
        /test/ci/nuget/quickstart-dotnetcore-e2e.expect $PATH_TO_AUDIO dotnet helloworld/bin/Debug/netcoreapp2.0/helloworld.dll
      SCRIPT
    displayName: Test
  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/TEST-*.trx'

- phase: AndroidBuild
  variables:
    ANDROID_NDK: $(System.ArtifactsDirectory)\ndk-r16b
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' AndroidBuild '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 30
    parallel: 4
    matrix:
      arm32_debug:
        BuildPlatform: arm32
        BuildConfiguration: Debug
      arm32_release:
        BuildPlatform: arm32
        BuildConfiguration: Release
      arm64_debug:
        BuildPlatform: arm64
        BuildConfiguration: Debug
      arm64_release:
        BuildPlatform: arm64
        BuildConfiguration: Release
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Android target platform (arm32 or arm64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM Android-$(BuildPlatform)
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install build dependencies
    inputs:
      type: FilePath
      scriptPath: 'ci/install-build-dependencies.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Get NDK
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        set -x -e -o pipefail
        NDK_VER=r16b
        NDK_SHA1SUM=f3f1909ed1052e98dda2c79d11c22f3da28daf25
        NDK_BASE="$(System.ArtifactsDirectory)\ndk-$NDK_VER"
        NDK_BASE_UNIX="$(cygpath -au "$NDK_BASE")"
        NDK_ZIP="$NDK_BASE_UNIX.zip"
        curl https://dl.google.com/android/repository/android-ndk-$NDK_VER-windows-x86_64.zip -o "$NDK_ZIP"
        echo "$NDK_SHA1SUM  $NDK_ZIP" | sha1sum -c --strict -
        unzip -q -o "$NDK_ZIP" -d "$NDK_BASE_UNIX.tmp"
        # A single nested directory should be inside
        existsExactlyOneDir "$NDK_BASE_UNIX.tmp"/*
        mv "$NDK_BASE_UNIX.tmp"/* "$NDK_BASE_UNIX"
        rmdir "$NDK_BASE_UNIX.tmp"
        rm "$NDK_ZIP"
        # This doesn't seem to work reliably .. or with multi-configuration build?
        # vsts_setvar ANDROID_NDK "$NDK_BASE"
        # echo Try 2
        # vsts_setvar ANDROID_NDK "$NDK_BASE"
        echo Done.
  - task: BatchScript@1
    displayName: Build
    inputs:
      filename: 'ci\android\build-android.bat'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: Sign com.microsoft.cognitiveservices.speech.jar
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/lib'
      Pattern: com.microsoft.cognitiveservices.speech.jar
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Create artifact: Android'
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '"" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/Out/Android-$(BuildPlatform)/$(BuildConfiguration) ANDROID'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Android'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out'
      ArtifactName: Android
      publishLocation: Container

- phase: AndroidPackage
  dependsOn: [Pre, AndroidBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' AndroidPackage '))
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 30
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=Android
      ArtifactOutWindows="$(Build.ArtifactStagingDirectory)/Out/$PublishArtifactName"
      ArtifactOut="$(cygpath -au "$ArtifactOutWindows")"
      ArtifactBasename="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA)"
      MavenRootWindows="$ArtifactOutWindows/maven"
      MavenRoot="$ArtifactOut/maven"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      MavenPackageDir="$MavenRoot/$relativeMavenPackageDir"
      MavenPackageDirWindows="$MavenRootWindows/$relativeMavenPackageDir"
      vsts_setvars_by_ref PublishArtifactName Artifact{Out{,Windows},Basename} Maven{Root,PackageDir}{,Windows}
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: Android
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      ./ci/android/build-aar.sh "$(SPEECHSDK_SEMVER2NOMETA)" "$(SPEECHSDK_VERSION_CODE)" "$(Build.ArtifactStagingDirectory)/In/Android"
    displayName: Build AAR content
  # Note: doc says "The file extension should match the selected archive type." - so we are renaming afterwards
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/android/aar'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename).zip'
    displayName: 'Create .zip (Release)'
  # Just archive the debug version for now
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/android/aar-debug'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename)-debug.zip'
    displayName: 'Create .zip (Debug)'
  # TODO if we use the .pom for Android and JRE, should change <packaging/> and <description/>
  - bash: |
      set -x -e -o pipefail
      mv "$(ArtifactOut)/$(ArtifactBasename)-debug".{zip,aar}
      mkdir -p "$(MavenPackageDir)"
      mv "$(ArtifactOut)/$(ArtifactBasename).zip" "$(MavenPackageDir)/$(ArtifactBasename).aar"
      cat >> "$(MavenPackageDir)/$(ArtifactBasename).pom" <<POM
      <?xml version="1.0" encoding="UTF-8"?>
      <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <modelVersion>4.0.0</modelVersion>
        <groupId>$(SPEECHSDK_MAVEN_GROUP_ID)</groupId>
        <artifactId>$(SPEECHSDK_MAVEN_ARTIFACT_ID)</artifactId>
        <version>$(SPEECHSDK_SEMVER2NOMETA)</version>
        <packaging>aar</packaging>
        <name>Microsoft Cognitive Services Speech SDK for Android</name>
        <description>
          This SDK allows you to use the Microsoft Cognitive Speech Service
          (Preview). See https://aka.ms/csspeech for more information.
        </description>
        <licenses>
          <license>
            <name>Microsoft Software License Terms for Microsoft Cognitive Services Speech SDK Preview</name>
            <url>https://aka.ms/csspeech/license</url>
          </license>
        </licenses>
      </project>
      POM
    displayName: 'Rename .zip -> .aar, place, and create .pom'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign *.aar (Release)'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(MavenRootWindows)'
      Pattern: '*.aar'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      ./ci/run-gradle.sh public_samples "$(MavenRoot)"
    displayName: Build Gradle-based samples
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out'
      ArtifactName: '$(PublishArtifactName)'
      publishLocation: Container
    displayName: 'Publish'
    condition: succeededOrFailed()

- phase: LinuxBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxBuild '))
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 30
    parallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
      release:
        BuildConfiguration: Release
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Linux-x64 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM Linux-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install build dependencies
    inputs:
      type: FilePath
      scriptPath: 'ci/install-build-dependencies.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: C API can be parsed by GCC
    inputs:
      type: FilePath
      scriptPath: './ci/check-gcc-parse.sh'
  - task: CMake@1
    displayName: Generate makefiles
    inputs:
      cmakeArgs: '-DCMAKE_BUILD_TYPE=$(BuildConfiguration) ..'
  - task: CMake@1
    displayName: CMake build
    inputs:
      cmakeArgs: '--build . -- -j4'
  # If we failed until here, don't try to run tests:
  - bash: . ci/functions.sh && vsts_setvar SPEECHSDK_RUN_TESTS false
    condition: failed()
  - bash: ./ci/set-test-variables.sh
    displayName: Set test variables
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Unit tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/rununittest.sh'
      args: './bin $(KeySpeech) $(KeyCris) $(KeyLuis) $(KeySkyman)'
      cwd: build
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Carbonx tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_carbonx.sh'
      args: './bin all $(KeySkyman) westus $(KeyLuis) westus2'
      cwd: build
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: UspConsole tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_uspconsole.sh'
      args: './bin $(KeySkyman)'
      cwd: build
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Run Java (JUnit) tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/runjava.sh'
      args: '$(Build.Repository.LocalPath) ./ "" $(KeySpeech) $(KeyCris) $(KeyLuis) $(KeySkyman)'
      cwd: build
    condition: and(eq(variables['BuildConfiguration'], 'Release'), eq(variables['SPEECHSDK_RUN_TESTS'],'true'))
    timeoutInMinutes: 7
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '"" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/Linux-x64/$(BuildConfiguration)'
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Linux
      publishLocation: Container
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))

- phase: LinuxX86Build
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxBuild '))
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 30
    parallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
      release:
        BuildConfiguration: Release
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Linux-x86 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM Linux-x86
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Build container, SDK, create drop
    inputs:
      type: InlineScript
      script: |
        set -e -o pipefail -x
        export SPEECH_SUBSCRIPTION_KEY=$(KeySkyman)
        pushd ci/docker
        ./build.sh linux/x86
        ./build-and-smoke-test.sh linux/x86 $(BuildConfiguration) build/Linux-x86
        popd
        ./ci/drop/bindrop.sh "Linux-x86" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/Linux-x86/$(BuildConfiguration)
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Linux x86'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Linux
      publishLocation: Container
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))

- phase: LinuxDrop
  dependsOn: [Pre, LinuxBuild, LinuxX86Build]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxDrop '))
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 30
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: DownloadBuildArtifacts@0
    displayName: Download Build Artifacts
    inputs:
      artifactName: Linux
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create release drop
    inputs:
      type: FilePath
      scriptPath: './ci/drop/linux-reldrop.sh'
      args: '"$(SPEECHSDK_SEMVER2NOMETA)" "$(Build.Repository.LocalPath)" "$(System.ArtifactsDirectory)/Linux" "$(Build.ArtifactStagingDirectory)/Linux/Drop"'
  - bash: |
      SPEECH_SUBSCRIPTION_KEY="$(KeySkyman)" ./ci/drop/test-quickstart-linux.sh --smoke-test "$(Build.ArtifactStagingDirectory)/Linux/Drop/SpeechSDK-Linux-$(SPEECHSDK_SEMVER2NOMETA).tar.gz"
    displayName: Test - build and run quickstart
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Linux Release Drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Linux'
      ArtifactName: Linux
      publishLocation: Container

- phase: IosBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' IosBuild '))
  queue:
    name: Hosted macOS Preview
    timeoutInMinutes: 30
    parallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
      release:
        BuildConfiguration: Release
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set iOS target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM IOS
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: CMake@1
    displayName: Generate makefiles
    inputs:
      cmakeArgs: ' -DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DBUILD_JAVA=OFF -DBUILD_CSHARP=OFF -DBUILD_PYTHON=OFF -Duse_openssl=OFF -Duse_builtin_httpapi=ON -DCMAKE_TOOLCHAIN_FILE=../external/ios-cmake/ios.toolchain.cmake -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DIOS_DEPLOYMENT_TARGET="10.0" ..'
  - task: CMake@1
    displayName: CMake build
    inputs:
      cmakeArgs: '--build . -- -j4'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '"" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/iOS/$(BuildConfiguration) IOS'
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: iOS
      publishLocation: Container
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))

- phase: OsxBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' OsxBuild '))
  queue:
    name: Hosted macOS Preview
    timeoutInMinutes: 30
    parallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
      release:
        BuildConfiguration: Release
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set OSX-x64 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM OSX-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install build dependencies
    inputs:
      type: FilePath
      scriptPath: 'ci/install-build-dependencies.sh'
  - task: CMake@1
    displayName: Generate makefiles
    inputs:
      cmakeArgs: '-DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DMACOSX=ON -DBUILD_CSHARP=OFF -Duse_builtin_httpapi=ON ..'
  - task: CMake@1
    displayName: CMake build
    inputs:
      cmakeArgs: '--build . -- -j4'
  # If we failed until here, don't try to run tests:
  - bash: . ci/functions.sh && vsts_setvar SPEECHSDK_RUN_TESTS false
    condition: failed()
  - bash: ./ci/set-test-variables.sh
    displayName: Set test variables
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Unit tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/rununittest.sh'
      args: './bin $(KeySpeech) $(KeyCris) $(KeyLuis) $(KeySkyman)'
      cwd: build
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Carbonx tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_carbonx.sh'
      args: './bin all $(KeySkyman) westus $(KeyLuis) westus2'
      cwd: build
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: UspConsole tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/e2e_uspconsole.sh'
      args: './bin $(KeySkyman)'
      cwd: build
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
    timeoutInMinutes: 7
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Run Java (JUnit) tests
    inputs:
      type: FilePath
      scriptPath: '$(Build.Repository.LocalPath)/ci/test/runjava.sh'
      args: '$(Build.Repository.LocalPath) ./ "" $(KeySpeech) $(KeyCris) $(KeyLuis) $(KeySkyman)'
      cwd: build
    condition: and(eq(variables['BuildConfiguration'], 'Release'), eq(variables['SPEECHSDK_RUN_TESTS'],'true'))
    timeoutInMinutes: 7
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '"" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/OSX-x64/$(BuildConfiguration) OSX'
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: OSX
      publishLocation: Container
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))

# TODO stuff like version
- phase: JsBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JsBuild '))
  queue:
    name: Hosted VS2017
    demands: npm
  steps:
  - task: Npm@1
    displayName: 'npm run build'
    inputs:
      command: custom
      workingDir: source/bindings/js
      verbose: false
      customCommand: 'run build'
  - task: Npm@1
    displayName: 'npm run bundle'
    inputs:
      command: custom
      workingDir: source/bindings/js
      verbose: false
      customCommand: 'run bundle'
  - task: Npm@1
    displayName: 'npm tests installer'
    inputs:
      workingDir: tests/functional/js/Unit
      verbose: false
  - script: RunTests.cmd SpeechSubscriptionKey:$(KeySkyman)
    displayName: 'Run tests'
    workingDirectory: tests/functional/js/Unit
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/TEST-*.xml'
    condition: always()
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-tslint.TSLint@1
    displayName: 'Run TSLint'
    enabled: false

- phase: Doxygen
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' Doxygen '))
  queue:
    name: Hosted macOS Preview
    timeoutInMinutes: 30
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set variables
    inputs:
      type: FilePath
      scriptPath: 'ci/set-variables.sh'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    inputs:
      type: InlineScript
      script: |
        set -e -o pipefail
        brew install doxygen
        cd ci/doxygen
        mkdir "$(Build.ArtifactStagingDirectory)/Doxygen"
        for lang in c cpp csharp java; do
          (
            cat ${lang}_doxygen.txt;
            echo PROJECT_NUMBER=$(SPEECHSDK_SEMVER2);
            echo 'WARN_FORMAT="##''vso[task.logissue type=warning;sourcepath=$file;linenumber=$line;columnnumber=1]$text"';
            echo OUTPUT_DIRECTORY=$(Build.ArtifactStagingDirectory)/Doxygen
          ) | doxygen -
        done
        git clone https://github.com/sourcey/moxygen.git
        cd moxygen
        git checkout c00d16803a6dfc40796cd4b76271c481ed865243
        git apply ../0001-Provide-shortname-provide-plain.patch
        npm install
        cd ..
        node moxygen/bin/moxygen.js -o cppapi.md -t ./moxygen_template/cpp -a $(Build.ArtifactStagingDirectory)/Doxygen/cppxml
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NonInteractive doxmox2docs.ps1 \
          -DoxygenIndexXml $(Build.ArtifactStagingDirectory)/Doxygen/cppxml/index.xml \
          -MoxygenApiMd cppapi.md \
          -OutputDir $(Build.ArtifactStagingDirectory)/Doxygen/cppmd
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Doxygen'
      ArtifactName: Doxygen
      publishLocation: Container
