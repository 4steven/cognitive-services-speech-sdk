# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.
#
# If you run into issue wrt. referenced resources when settings this build up, cf. here:
#   https://github.com/Microsoft/vsts-agent/issues/1301 wrt. ConnectedServiceName
#
# TODO describe parameters
resources:
- repo: self
  clean: true

variables:
  SIGN_PARAMS_JAVA: |
    [
      {
        "keyCode": "CP-232612-Java",
        "operationSetCode": "JavaSign",
        "parameters": [
        {
          "parameterName": "SigAlg",
          "parameterValue": "SHA256withRSA"
        },
        {
          "parameterName": "Timestamp",
          "parameterValue": "-tsa http://sha256timestamp.ws.symantec.com/sha256/timestamp"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
      },
      {
        "keyCode": "CP-232612-Java",
        "operationSetCode": "JavaVerify",
        "parameters": [ ],
        "toolName": "sign",
        "toolVersion": "1.0"
      }
    ]
  SIGN_PARAMS_DLL: |
    [
      {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [
          {
            "parameterName": "OpusName",
            "parameterValue": "Microsoft"
          },
          {
            "parameterName": "OpusInfo",
            "parameterValue": "http://www.microsoft.com"
          },
          {
            "parameterName": "PageHash",
            "parameterValue": "/NPH"
          },
          {
            "parameterName": "FileDigest",
            "parameterValue": "/fd sha256"
          },
          {
            "parameterName": "TimeStamp",
            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
          }
        ],
        "toolName": "signtool.exe",
        "toolVersion": "6.2.9304.0"
      },
      {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolVerify",
          "parameters": [ ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
       }
    ]
  SIGN_PARAMS_IOS: |
    [
      {
        "keyCode": "CP-233039-Apple",
        "operationSetCode": "iOSSdkSign"
      }
    ]
  SPEECHSDK_MAVEN_ARTIFACT_ID: client-sdk
  SPEECHSDK_MAVEN_GROUP_ID: com.microsoft.cognitiveservices.speech
  SPEECHSDK_NUGET_VERSION: 4.6
  AZURE_CONTAINER_REGISTRY: csspeechsdkacr201809.azurecr.io
  AZURE_SUBSCRIPTION_ENDPOINT: 'Custom Speech Development (3a96ef56-41a9-40a0-b0f3-fb125c2b8798) - RG csspeechsdk-carbon'

jobs:

- job: Pre
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 30
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
    name: var
  - bash: |
      . ci/functions.sh
      vsts_updatebuildnumber $(SPEECHSDK_SEMVER2NOMETA)
      vsts_addbuildtag $(SPEECHSDK_BUILD_TYPE)
    displayName: Set build number and tag
  - bash: |
      ./ci/check-git-head.sh &&
      perl ci/check-docfx-codetags.pl public_samples
    displayName: Repository checks

- job: WindowsSdlBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsSdlBuild '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 120
  variables:
    BuildPlatform: x64
    BuildConfiguration: Release
    SPEECHSDK_BUILD_PHASES: $[ dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'] ]
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  # TODO detect installation failures, export diagnostics. For now, we'll fail in msbuild a little bit down.
  - powershell: |
      Invoke-WebRequest -OutFile vs_enterprise.exe https://aka.ms/vs/15/release/vs_enterprise.exe
      Start-Process -Wait cmd -Verb runas -ArgumentList /c, cd, (Get-Location), '&&', start, /wait, .\vs_enterprise.exe, modify, --installPath, '"%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Enterprise"', --add, Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre, --quiet, --norestart, --wait, '&&', echo, '%ERRORLEVEL%', '>', result.txt
    displayName: Install Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre VS component
    condition: and(succeeded(),eq(variables['SPEECHSDK_SPECTRE_MITIGATION'],'true'))
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - task: CMake@1
    displayName: Generate solution
    inputs:
      cmakeArgs: '-G "$(SPEECHSDK_CMAKE_GENERATOR)" -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM) -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA) -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION) ..'
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
      # Needed for SDL:
      createLogFile: true
  # Checks BEGIN
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
    # Note: source/bindings/csharp/CMakeLists.txt (Microsoft.CognitiveServices.Speech.csharp.csproj.template)
    #       does _not_ pick up on Roslyn analyzers options set here; for now
    #       these need to be manually kept in sync.
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'BinSkim (can pass only with Spectre mitigation)'
    inputs:
      arguments: 'analyze build/bin/$(BuildConfiguration)/*.dll --recurse'
    condition: and(succeeded(),eq(variables['SPEECHSDK_SPECTRE_MITIGATION'],'true'))
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'AntiMalware'
    inputs:
      FileDirPath: '.'
      EnableServices: true
      SignatureFreshness: ThreeDays
      TreatStaleSignatureAs: Warning
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-apiscan.APIScan@1
    displayName: 'APIScan'
    inputs:
      softwareName: 'Cognitive Services Speech SDK'
      softwareVersionNum: 1.0
      isLargeApp: false
    enabled: false
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'CredScan (source-scan, dir: all)'
    inputs:
      suppressionsFile: 'ci/sdl/LocalSuppression.json'
      debugMode: false
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'PoliCheck (source-scan, dir: source)'
    inputs:
      targetType: F
      targetArgument: 'source'
      result: PoliCheckSource.xml
      optionsFC: 1
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'PoliCheck (source-scan, dir: public samples)'
    inputs:
      targetType: F
      targetArgument: 'public_samples'
      termTypeT: 0001aCustom
      result: PoliCheckSamples.xml
      SOMEnabled: true
      optionsFC: 1
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-fxcop.FxCop@2
    displayName: 'Run FxCop'
    inputs:
      inputType: Basic
      targets: 'build/bin/$(BuildConfiguration)/net461'
      disableRules: 'Microsoft.Globalization#CA2101'
      verbose: true
  - bash: rm -rf build/source/bindings/java/javadoc
    displayName: Remove JavaDoc folder
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-moderncop.ModernCop@2
    displayName: 'ModernCop (managed JS code)'
    inputs:
      InputType: Basic
      OutputFormat: red
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'Run AutoApplicability'
    inputs:
      ApplyRules: All
      ExternalRelease: true
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-tslint.TSLint@1
    displayName: 'Run TSLint'
    inputs:
      Ruleset: custom
      RulesetFile: source/bindings/js/tslint.json
      Files: source/**/*.ts
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-prefast.SDLNativeRules@2
    displayName: 'Run the PREfast SDL Native Rules for MSBuild'
  # Checks END
  # Publish artifact and fail the build if necessary
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'
    inputs:
      AllTools: true
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'SDL: Post Analysis (w/o TsaUpload)'
    inputs:
      AllTools: true
    continueOnError: false
    condition: not(contains(variables['SPEECHSDK_BUILD_PHASES'], ' TsaUpload '))
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'SDL: Post Analysis (w/ TsaUpload)'
    inputs:
      AllTools: true
    continueOnError: true
    condition: contains(variables['SPEECHSDK_BUILD_PHASES'], ' TsaUpload ')

- job: TsaUpload
  dependsOn: [Pre, WindowsSdlBuild, WindowsSDLFortifyJava]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' TsaUpload '))
  pool:
    name: Carbon
  timeoutInMinutes: 30
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading CodeAnalysisLogs artifacts'
    inputs:
      artifactName: CodeAnalysisLogs
      downloadPath: $(System.ArtifactsDirectory)/In
  - powershell: |
      $logDir = "$(Agent.BuildDirectory)/_sdt/logs"
      if (Test-Path $logDir) {
        Remove-Item -Recurse -Force $logDir
      }
      if (-not (Test-Path (Split-Path $logDir))) {
        New-Item -ItemType Directory (Split-Path $logDir)
      }
      Move-Item $(System.ArtifactsDirectory)/In/CodeAnalysisLogs $logDir
    displayName: Move logs to target location
  - task: DownloadBuildArtifacts@0
    displayName: 'Download FortifySDL logs from artifacts'
    inputs:
      artifactName: sca_artifacts
      downloadPath: '$(System.ArtifactsDirectory)/sca_artifacts'
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload to Codebase: Carbon_master Stamp: Bing'
    inputs:
      tsaStamp: Bing
      codeBaseName: 'Carbon_master'
    # TODO or fail on error?
    continueOnError: true
    condition: succeededOrFailed()

# This phase is responsible for running CompEval test (Windows C# only)
# For now, it is triggered by a separate build definition in AzureDevOps: "CompEval Test"
- job: CompEvalTest
  dependsOn: [Pre, WindowsBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' CompEvalTest '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 400
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)\In
  - powershell: |
      $tools = Start-Process -FilePath "C:\Program Files (x86)\Microsoft SDKs\Azure\AzCopy\AzCopy.exe" -Wait -PassThru -NoNewWindow -ArgumentList /Source:https://csspeechtestdata.blob.core.windows.net/tools/NormAndAlign, /Dest:CompEvalRun\, /SourceKey:$(TestDataStorageKey), /S, /Y, /XO
      $data = Start-Process -FilePath "C:\Program Files (x86)\Microsoft SDKs\Azure\AzCopy\AzCopy.exe" -Wait -PassThru -NoNewWindow -ArgumentList /Source:https://csspeechtestdata.blob.core.windows.net/datasets/CompEval, /Dest:CompEvalRun\, /SourceKey:$(TestDataStorageKey), /S, /Y, /XO
      if (($tools.ExitCode -ne 0) -or ($data.ExitCode -ne 0)) {
          throw "an error occurred"
      }
    displayName: 'Downloading CompEval data'
  - bash: |
      # --build-dir is used as a drop directory here
      ./ci/run-tests.sh \
        --test-configuration ci/test-config-compeval.json \
        --build-dir "$(cygpath -au "$(Build.ArtifactStagingDirectory)")"/In \
        --platform Windows-x64-Release \
        --timeout 400m \
        -D compeval-key="$(NorthEuropeKeySkyman)" \
        -D input_dir=CompEvalRun \
        -D output_dir=CompEvalRun -- compeval_tests
    displayName: 'Transcription'

- job: WindowsBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsBuild '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 60
  strategy:
    maxParallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: . ./ci/functions.sh && vsts_setvar SPEECHSDK_SPECTRE_MITIGATION false
    displayName: Reset SPEECHSDK_SPECTRE_MITIGATION in Debug
    condition: eq(variables['BuildConfiguration'], 'Debug')
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  # TODO detect installation failures, export diagnostics. For now, we'll fail in msbuild a little bit down.
  - powershell: |
      Invoke-WebRequest -OutFile vs_enterprise.exe https://aka.ms/vs/15/release/vs_enterprise.exe
      Start-Process -Wait cmd -Verb runas -ArgumentList /c, cd, (Get-Location), '&&', start, /wait, .\vs_enterprise.exe, modify, --installPath, '"%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Enterprise"', --add, Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre, --quiet, --norestart, --wait, '&&', echo, '%ERRORLEVEL%', '>', result.txt
    displayName: Install Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre VS component
    condition: eq(variables['SPEECHSDK_SPECTRE_MITIGATION'],'true')
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - task: CMake@1
    displayName: Generate solution
    inputs:
      cmakeArgs: '-G "$(SPEECHSDK_CMAKE_GENERATOR)" -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM) -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA) -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION) ..'
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Windows C++, C# and Java binaries'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/bin'
      Pattern: 'Microsoft.CognitiveServices.Speech.core.dll,Microsoft.CognitiveServices.Speech.csharp.bindings.dll,Microsoft.CognitiveServices.Speech.csharp.dll,Microsoft.CognitiveServices.Speech.java.bindings.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - template: test-during-build.yml
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '$(BuildPlatform) $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)'
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Windows
      publishLocation: Container

- job: WindowsUwpBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsUwpBuild '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  strategy:
    maxParallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "WindowsUwp-x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "WindowsUwp-x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: . ci/functions.sh && ./ci/set-variables.sh
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - task: CMake@1
    displayName: Generate solution
    inputs:
      cmakeArgs: '-G "$(SPEECHSDK_CMAKE_GENERATOR)" -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM) -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA) ..'
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Windows C++ and C# binaries'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/bin/$(BuildConfiguration)'
      Pattern: 'Microsoft.CognitiveServices.Speech.core.uwp.dll,Microsoft.CognitiveServices.Speech.csharp.bindings.uwp.dll,Microsoft.CognitiveServices.Speech.csharp.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '$(BuildPlatform) $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration) UWP'
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: WindowsUwp
      publishLocation: Container

# Note: for now this packages up only {Linux,Windows}-x64-Release
- job: JavaJrePackage
  dependsOn: [Pre, LinuxBuild, WindowsBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JavaJrePackage '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=JavaJrePackage
      ArtifactOutWindows="$(Build.ArtifactStagingDirectory)/Out/$PublishArtifactName"
      ArtifactOut="$(cygpath -au "$ArtifactOutWindows")"
      ArtifactBasename="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA)"
      MavenRoot="$ArtifactOut/maven"
      MavenRootWindows="$ArtifactOutWindows/maven"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      MavenPackageDir="$MavenRoot/$relativeMavenPackageDir"
      MavenPackageDirWindows="$MavenRootWindows/$relativeMavenPackageDir"
      vsts_setvars_by_ref PublishArtifactName Artifact{Out{,Windows},Basename} Maven{Root,PackageDir}{,Windows}
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Linux artifacts'
    inputs:
      artifactName: Linux
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      ./ci/jre/build-jar.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)")"/In
  # Note: doc says "The file extension should match the selected archive type." - so we are renaming afterwards
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/jre/jar'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename).zip'
    displayName: 'Create .zip'
  - bash: |
      set -x -e -o pipefail
      mkdir -p "$(MavenPackageDir)"
      mv "$(ArtifactOut)/$(ArtifactBasename).zip" "$(MavenPackageDir)/$(ArtifactBasename).jar"
    displayName: 'Rename .zip -> .jar, place'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign *.jar'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(MavenRootWindows)'
      Pattern: '*.jar'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      ./ci/run-maven.sh public_samples "$(MavenRoot)"
    displayName: Build Maven-based samples
  - bash: |
       set -x -e
       eval $(perl ci/evaluate-test-config.pl --verbose --format bash-variable --input ci/test-config.json \
         -D luis-key=$(luis-westus-s0-201809-key1) \
         -D speech-key=$(NorthEuropeKeySkyman))
       java \
        -cp $(printf "%s;" \
           "$(MavenPackageDirWindows)/$(ArtifactBasename).jar" \
           "$(Build.ArtifactStagingDirectory)/In/Windows/x64/Release/private/bin/com.microsoft.cognitiveservices.speech.tests.jar" \
           "external/junit/junit-4.12.jar" \
           "external/junit/hamcrest-core-1.3.jar") \
         -DSpeechSubscriptionKey="$SPEECHSDK_SPEECH_KEY" \
         -DSpeechRegion="$SPEECHSDK_SPEECH_REGION" \
         -DLuisRegion="$SPEECHSDK_LUIS_REGION" \
         -DWaveFile=tests/input/audio/whatstheweatherlike.wav \
         -DKeyword=Computer \
         -DKeywordModel=/data/keyword/kws.table \
         -DTestOutputFilename=test-java-unittests-package.xml \
         tests.runner.Runner \
         tests.AllTests
    displayName: Run unit test
  # TODO more - e.g. POM?
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out/$(PublishArtifactName)'
      ArtifactName: $(PublishArtifactName)
      publishLocation: Container
    displayName: 'Publish .jar'
    condition: succeededOrFailed()

- job: JavaJrePackageLinuxTest
  dependsOn: [Pre, JavaJrePackage]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JavaJrePackageLinuxTest '))
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 30
  steps:
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=JavaJrePackage
      ArtifactIn="$(Build.ArtifactStagingDirectory)/In/$PublishArtifactName"
      MavenRoot="$ArtifactIn/maven"
      JarName="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA).jar"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      PathToJar="$MavenRoot/$relativeMavenPackageDir/$JarName"
      vsts_setvars_by_ref PublishArtifactName ArtifactIn MavenRoot JarName PathToJar
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading JavaJrePackage artifacts'
    inputs:
      artifactName: $(PublishArtifactName)
      downloadPath: $(Build.ArtifactStagingDirectory)/In
  - bash: |
      set -u -e -x -o pipefail
      . ci/functions.sh
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      java -version
      patchSamplesFromTestConfig public_samples/quickstart/java-jre \
        ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman)
      ./ci/run-maven.sh public_samples "$(MavenRoot)"
    displayName: Patch and build samples
  - template: get-docker-image.yml
    parameters:
      imageBase: oobejre_ubuntu1604_x64
      outvarImage: DOCKER_IMAGE
  - bash: |
      set -e -x -o pipefail
      cp "$(PathToJar)" $(Build.Repository.LocalPath)
      docker run --rm -i --volume "$(Build.Repository.LocalPath):/test" --workdir /test "$(DOCKER_IMAGE)" bash - <<"SCRIPT"
        set -e -x -o pipefail
        PATH_TO_AUDIO=/test/tests/input/audio/whatstheweatherlike.wav
        pulseaudio -D --exit-idle-time=-1
        sleep 1.5
        pactl load-module module-null-sink sink_name=MicOutput sink_properties=device.description=Virtual_Microphone_Output
        pacmd load-module module-virtual-source source_name=VirtualMic
        trap 'pulseaudio --kill' EXIT
        # Note: don't wait for keypress. Ignore crashes after successful reco.
        /test/ci/quickstart-e2e.expect $PATH_TO_AUDIO "What's the weather like?" 1 \
          java -cp ./public_samples/quickstart/java-jre/target/quickstart-eclipse-1.0.0-SNAPSHOT.jar:/test/"$(JarName)" speechsdk.quickstart.Main
      SCRIPT
    displayName: Test quickstart-jre

- job: NuGet
  # Note: NuGet currently does not depend on LinuxDockerBuild (only needs x64 binaries)
  dependsOn: [Pre, LinuxBuild, WindowsBuild, WindowsUwpBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' NuGet '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)\In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Linux artifacts'
    inputs:
      artifactName: Linux
      downloadPath: $(System.ArtifactsDirectory)\In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading WindowsUwp artifacts'
    inputs:
      artifactName: WindowsUwp
      downloadPath: $(System.ArtifactsDirectory)\In
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - bash: |
      . ci/functions.sh
      vsts_setvar ZipBasename "SpeechSDK-Samples-$(SPEECHSDK_SEMVER2NOMETA)"
    displayName: 'Set variables'
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    inputs:
      type: FilePath
      scriptPath: './ci/nuget/pack.sh'
      args: '$(Build.Repository.LocalPath) $(System.ArtifactsDirectory)\In $(SPEECHSDK_SEMVER2NOMETA) $(Build.ArtifactStagingDirectory)\Windows'
    displayName: Create NuGet
  # We could / should generate this elsewhere? Doesn't only apply to Windows + NuGet anymore...
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    inputs:
      type: InlineScript
      script: |
         set -e -x -o pipefail
         # Drop is not needed anymore
         rm -rf "$(cygpath -au "$(System.ArtifactsDirectory)\In")"
         git clean -fdx public_samples
         perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
         cp --verbose --recursive --preserve public_samples "$(ZipBasename)"
         NOW=$(date -Iseconds)
         find "$(ZipBasename)" | xargs touch --date=$NOW
    displayName: 'Create directory with patched samples'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(ZipBasename)
      includeRootFolder: true
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/Windows/$(ZipBasename).zip
    displayName: 'Create .zip'
  - bash: |
      ./ci/nuget/restore-from-local.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)/Windows")" public_samples
    displayName: 'Test - restore packages'
  # Note: for now building any platform. In the future, should build all available.
  - task: VSBuild@1
    inputs:
      solution: 'public_samples/**/*.sln'
      maximumCpuCount: true
    displayName: 'Test - build solutions'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(Build.ArtifactStagingDirectory)/Windows'
      Pattern: '*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: |
        [
          {
            "keyCode": "CP-401405",
            "operationSetCode": "NuGetSign",
            "parameters": [ ],
            "toolName": "sign",
            "toolVersion": "1.0"
          },
          {
            "keyCode": "CP-401405",
            "operationSetCode": "NuGetVerify",
            "parameters": [ ],
            "toolName": "sign",
            "toolVersion": "1.0"
          }
        ]
    condition: eq(variables['SPEECHSDK_SIGN'], 'true')
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    enabled: false
    inputs:
      type: InlineScript
      script: |
         . ci/functions.sh
         set -e -o pipefail
         SHA256_SUM="$(sha256sum "$(cygpath -au "$(Build.ArtifactStagingDirectory)/$(ZipBasename).zip")" | cut -f1 -d' ')"
         # N.B. two spaces in the next line intentional
         echo "$SHA256_SUM  $(ZipBasename).zip"
         vsts_setvar SAMPLES_SHA256SUM "$SHA256_SUM"
         # checksum is not yet used...
    displayName: 'Compute SHA256 for .zip'
  - task: NuGetCommand@2
    displayName: NuGet push to VSTS feed
    inputs:
      command: push
      publishVstsFeed: $(SPEECHSDK_VSTS_FEED)
    condition: eq(variables['SPEECHSDK_NUGET_VSTS_PUSH'],'true')
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Windows'
      ArtifactName: Windows
      publishLocation: Container
    condition: succeededOrFailed()
    displayName: 'Publish .zip and .nupkg'

- job: WackTest
  dependsOn: [Pre, NuGet]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WackTest '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  variables:
    UwpSampleDir: public_samples/quickstart/csharp-uwp
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading NuGet package'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
      itemPattern: '**/*.nupkg'
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - bash: |
      set -u -e -x -o pipefail
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" "$(UwpSampleDir)"
      ./ci/nuget/restore-from-local.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)/In/Windows")" "$(UwpSampleDir)"
    displayName: 'Patch version and restore packages'
  - powershell: |
      New-Item -ErrorAction Stop -ItemType Directory "$(Build.ArtifactStagingDirectory)/WACK"
      ./ci/Invoke-Wack.ps1 `
        -Solution "$(UwpSampleDir)/helloworld.sln" `
        -CertPath "$(UwpSampleDir)/helloworld/helloworld_TemporaryKey.pfx" `
        -Path "$(Build.ArtifactStagingDirectory)/WACK/appcertreport.xml"
    displayName: Build and run Windows AppCert Kit
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/WACK'
      ArtifactName: WACK
      publishLocation: Container
    condition: succeededOrFailed()
    displayName: 'Publish WACK report'

- job: NuGetLinuxTest
  dependsOn: [Pre, NuGet]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' NuGetLinuxTest '))
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 30
  steps:
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      ./ci/set-variables.sh
    displayName: Set variables
  - task: DownloadBuildArtifacts@0
    displayName: Downloading Windows artifacts
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
      itemPattern: '**/*.nupkg'
  - template: get-docker-image.yml
    parameters:
      imageBase: oobedevdnc20_ubuntu1604_x64
      outvarImage: DOCKER_IMAGE
  - bash: |
      set -u -e -x -o pipefail
      . ci/functions.sh
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" tests/functional/csharp/end2end/
      eval $(perl ci/evaluate-test-config.pl --verbose --format bash-variable --input ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman))
      # dotnet test does not allow to supply TestRunParameters from command-line?!
      perl -pi - \
        UnifiedSpeechSubscriptionKey "$SPEECHSDK_SPEECH_KEY" \
        Region "$SPEECHSDK_SPEECH_REGION" \
        DeploymentId "$SPEECHSDK_SPEECH_ENDPOINTID_ENUS" \
        InputDir /test/tests/input/ \
        LanguageUnderstandingSubscriptionKey "$SPEECHSDK_LUIS_KEY" \
        LanguageUnderstandingServiceRegion "$SPEECHSDK_LUIS_REGION" \
        LanguageUnderstandingHomeAutomationAppId "$SPEECHSDK_LUIS_HOMEAUTOMATION_APPID" \
        tests/functional/csharp/end2end/csharp.runsettings <<"SCRIPT"
        BEGIN {
          %A = splice(@ARGV, 0, $#ARGV);
          $keysRe = "(?:\\b" . (join "\\b|\\b", keys %A) . "\\b)";
          $keysRe = qr/$keysRe/;
        }
        s/(<Parameter name="($keysRe)" value=")([^"]*)/$1.$A{$2}/ge
      SCRIPT
      patchSamplesFromTestConfig public_samples/quickstart/csharp-dotnetcore \
        ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman)
      mkdir localnuget
      cp --verbose $(System.ArtifactsDirectory)/In/Windows/Microsoft.CognitiveServices.Speech.*.nupkg localnuget
      # First run the unit tests
      docker run --rm -i --volume "$(Build.Repository.LocalPath):/test" --workdir /test "$(DOCKER_IMAGE)" bash - <<"SCRIPT"
        set -e -x -o pipefail
        cd tests/functional/csharp/end2end
        dotnet restore --no-cache --source https://api.nuget.org/v3/index.json --source /test/localnuget Microsoft.CognitiveServices.Speech.Tests.EndToEnd.csproj
        dotnet test --framework netcoreapp2.0 --settings csharp.runsettings --logger 'trx;LogFileName=test-csharp_unit_tests-nupkg-Linux-x64-Release.trx'
      SCRIPT
      # Then run the end-to-end for the quickstart
      docker run --rm -i --volume "$(Build.Repository.LocalPath):/test" --workdir /test "$(DOCKER_IMAGE)" bash - <<"SCRIPT"
        set -e -x -o pipefail
        PATH_TO_AUDIO=/test/tests/input/audio/whatstheweatherlike.wav
        cd public_samples/quickstart/csharp-dotnetcore
        dotnet restore --no-cache --source /test/localnuget helloworld/helloworld.csproj
        dotnet build helloworld/helloworld.csproj
        pulseaudio -D --exit-idle-time=-1
        sleep 1.5
        pactl load-module module-null-sink sink_name=MicOutput sink_properties=device.description=Virtual_Microphone_Output
        pacmd load-module module-virtual-source source_name=VirtualMic
        trap 'pulseaudio --kill' EXIT
        /test/ci/quickstart-e2e.expect $PATH_TO_AUDIO "What's the weather like?" 0 dotnet helloworld/bin/Debug/netcoreapp2.0/helloworld.dll
      SCRIPT
    displayName: Test
  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/test-*.trx'

- job: AndroidBuild
  variables:
    ANDROID_NDK: $(System.ArtifactsDirectory)\ndk-r16b
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' AndroidBuild '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  strategy:
    maxParallel: 8
    matrix:
      arm32_debug:
        BuildPlatform: arm32
        BuildConfiguration: Debug
      arm32_release:
        BuildPlatform: arm32
        BuildConfiguration: Release
      arm64_debug:
        BuildPlatform: arm64
        BuildConfiguration: Debug
      arm64_release:
        BuildPlatform: arm64
        BuildConfiguration: Release
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: x86
        BuildConfiguration: Debug
      x86_release:
        BuildPlatform: x86
        BuildConfiguration: Release
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Android target platform (arm32 or arm64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM Android-$(BuildPlatform)
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Get NDK
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        NDK_VER=r16b
        NDK_SHA1SUM=f3f1909ed1052e98dda2c79d11c22f3da28daf25
        NDK_BASE="$(System.ArtifactsDirectory)\ndk-$NDK_VER"
        NDK_BASE_UNIX="$(cygpath -au "$NDK_BASE")"
        NDK_ZIP="$NDK_BASE_UNIX.zip"
        MAX_RETRIES=3
        RETRY=0
        until [[ $RETRY -ge $MAX_RETRIES ]]
        do
          curl --http1.1 -C - https://dl.google.com/android/repository/android-ndk-$NDK_VER-windows-x86_64.zip -o "$NDK_ZIP" && break
          RETRY=$((RETRY+1))
          # Sleep 3..7 seconds
          sleep $(((RANDOM % 5) + 3))
        done
        if [[ $RETRY -ge $MAX_RETRIES ]]; then
            echo "Could not successfully download NDK, exiting"
            exit 1
        fi

        set -x -e -o pipefail
        echo "$NDK_SHA1SUM  $NDK_ZIP" | sha1sum -c --strict -
        unzip -q -o "$NDK_ZIP" -d "$NDK_BASE_UNIX.tmp"
        # A single nested directory should be inside
        existsExactlyOneDir "$NDK_BASE_UNIX.tmp"/*
        mv "$NDK_BASE_UNIX.tmp"/* "$NDK_BASE_UNIX"
        rmdir "$NDK_BASE_UNIX.tmp"
        rm "$NDK_ZIP"
        # This doesn't seem to work reliably .. or with multi-configuration build?
        # vsts_setvar ANDROID_NDK "$NDK_BASE"
        # echo Try 2
        # vsts_setvar ANDROID_NDK "$NDK_BASE"
        echo Done.
  - task: BatchScript@1
    displayName: Build
    inputs:
      filename: 'ci\android\build-android.bat'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: Sign com.microsoft.cognitiveservices.speech.jar
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/lib'
      Pattern: com.microsoft.cognitiveservices.speech.jar
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Create artifact: Android'
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '"" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/Out/Android-$(BuildPlatform)/$(BuildConfiguration) $(SPEECHSDK_TARGET_PLATFORM)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Android'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out'
      ArtifactName: Android
      publishLocation: Container

- job: AndroidPackage
  dependsOn: [Pre, AndroidBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' AndroidPackage '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=Android
      ArtifactOutWindows="$(Build.ArtifactStagingDirectory)/Out/$PublishArtifactName"
      ArtifactOut="$(cygpath -au "$ArtifactOutWindows")"
      ArtifactBasename="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA)"
      MavenRootWindows="$ArtifactOutWindows/maven"
      MavenRoot="$ArtifactOut/maven"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      MavenPackageDir="$MavenRoot/$relativeMavenPackageDir"
      MavenPackageDirWindows="$MavenRootWindows/$relativeMavenPackageDir"
      vsts_setvars_by_ref PublishArtifactName Artifact{Out{,Windows},Basename} Maven{Root,PackageDir}{,Windows}
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: Android
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      ./ci/android/build-aar.sh "$(SPEECHSDK_SEMVER2NOMETA)" "$(SPEECHSDK_VERSION_CODE)" "$(Build.ArtifactStagingDirectory)/In/Android"
    displayName: Build AAR content
  # Note: doc says "The file extension should match the selected archive type." - so we are renaming afterwards
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/android/aar'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename).zip'
    displayName: 'Create .zip (Release)'
  # Just archive the debug version for now
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/android/aar-debug'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename)-debug.zip'
    displayName: 'Create .zip (Debug)'
  # TODO if we use the .pom for Android and JRE, should change <packaging/> and <description/>
  - bash: |
      set -x -e -o pipefail
      mv "$(ArtifactOut)/$(ArtifactBasename)-debug".{zip,aar}
      mkdir -p "$(MavenPackageDir)"
      mv "$(ArtifactOut)/$(ArtifactBasename).zip" "$(MavenPackageDir)/$(ArtifactBasename).aar"
      cat >> "$(MavenPackageDir)/$(ArtifactBasename).pom" <<POM
      <?xml version="1.0" encoding="UTF-8"?>
      <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <modelVersion>4.0.0</modelVersion>
        <groupId>$(SPEECHSDK_MAVEN_GROUP_ID)</groupId>
        <artifactId>$(SPEECHSDK_MAVEN_ARTIFACT_ID)</artifactId>
        <version>$(SPEECHSDK_SEMVER2NOMETA)</version>
        <packaging>aar</packaging>
        <name>Microsoft Cognitive Services Speech SDK for Java</name>
        <description>
          This SDK allows you to use the Microsoft Cognitive Speech Service.
          See https://aka.ms/csspeech for more information.
        </description>
        <licenses>
          <license>
            <name>Microsoft Software License Terms for Microsoft Cognitive Services Speech SDK</name>
            <url>https://aka.ms/csspeech/license201809</url>
          </license>
        </licenses>
      </project>
      POM
    displayName: 'Rename .zip -> .aar, place, and create .pom'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign *.aar (Release)'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(MavenRootWindows)'
      Pattern: '*.aar'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      ./ci/run-gradle.sh public_samples "$(MavenRoot)"
    displayName: Build Gradle-based samples
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out'
      ArtifactName: '$(PublishArtifactName)'
      publishLocation: Container
    displayName: 'Publish'
    condition: succeededOrFailed()

- job: LinuxBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxBuild '))
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 60
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
        BuildPlatform: x64
      release:
        BuildConfiguration: Release
        BuildPlatform: x64
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Linux-x64 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM Linux-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: C API can be parsed by GCC
    inputs:
      type: FilePath
      scriptPath: './ci/check-gcc-parse.sh'
  - task: CMake@1
    displayName: Generate makefiles
    inputs:
      cmakeArgs: '-DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM) -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA) ..'
  - task: CMake@1
    displayName: CMake build
    inputs:
      cmakeArgs: '--build . -- -j4'
  - template: test-during-build.yml
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '"" $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/Linux-x64/$(BuildConfiguration)'
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Linux
      publishLocation: Container
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))

- template: linux-docker-build.yml

- job: LinuxDrop
  dependsOn: [Pre, LinuxBuild, LinuxDockerBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxDrop '))
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 30
  steps:
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      ./ci/set-variables.sh
    displayName: Set variables
  - task: DownloadBuildArtifacts@0
    displayName: Download Build Artifacts
    inputs:
      artifactName: Linux
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create release drop
    inputs:
      type: FilePath
      scriptPath: './ci/drop/linux-reldrop.sh'
      args: '"$(SPEECHSDK_SEMVER2NOMETA)" "$(Build.Repository.LocalPath)" "$(System.ArtifactsDirectory)/Linux" "$(Build.ArtifactStagingDirectory)/Linux/Drop"'
  - template: get-docker-image.yml
    parameters:
      imageBase: oobedevcpp_ubuntu1604_x64
      outvarImage: DOCKER_IMAGE_X64
  - template: get-docker-image.yml
    parameters:
      imageBase: oobedevcpp_ubuntu1604_x86
      outvarImage: DOCKER_IMAGE_X86
  - bash: |
      . ci/functions.sh &&
      patchSamplesFromTestConfig public_samples/quickstart/cpp-linux \
        ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman)
    displayName: Patch quickstart
  - bash: |
      ./ci/drop/test-quickstart-linux.sh "$(DOCKER_IMAGE_X64)" "$(Build.ArtifactStagingDirectory)/Linux/Drop/SpeechSDK-Linux-$(SPEECHSDK_SEMVER2NOMETA).tar.gz" x64
    displayName: Build and test quickstart for x64
  - bash: |
      ./ci/drop/test-quickstart-linux.sh "$(DOCKER_IMAGE_X86)" "$(Build.ArtifactStagingDirectory)/Linux/Drop/SpeechSDK-Linux-$(SPEECHSDK_SEMVER2NOMETA).tar.gz" x86
    displayName: Build and test quickstart for x86
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Linux Release Drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Linux'
      ArtifactName: Linux
      publishLocation: Container

- job: IosBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' IosBuild '))
  pool:
    name: Hosted macOS Preview
  timeoutInMinutes: 30
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
      release:
        BuildConfiguration: Release
  variables:
    BuildPlatform: iOS
    FrameworkName: MicrosoftCognitiveServicesSpeech
    VersionedFrameworkName: $(FrameworkName)-$(BuildPlatform)-$(SPEECHSDK_SEMVER2NOMETA)
    OutputDirectory: $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)
    JointCmakeArgs: -DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA)
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set iOS target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM IOS
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: CMake@1
    displayName: Generate makefiles for iOS simulator
    inputs:
      cmakeArgs: ' $(JointCmakeArgs) -DSPEECHSDK_TARGET_PLATFORM=IOSSIMULATOR-x64 ..'
      workingDirectory: 'build_ios_simulator'
  - task: CMake@1
    displayName: CMake build for iOS simulator
    inputs:
      cmakeArgs: '--build . -- -j4'
      workingDirectory: build_ios_simulator
  - task: CMake@1
    displayName: Generate makefiles for iOS device (Release)
    inputs:
      cmakeArgs: ' $(JointCmakeArgs) -DSPEECHSDK_TARGET_PLATFORM=IOS-arm64 ..'
      workingDirectory: build_ios_device
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - task: CMake@1
    displayName: Generate makefiles for iOS device (Debug)
    inputs:
      cmakeArgs: ' $(JointCmakeArgs) -DSPEECHSDK_TARGET_PLATFORM=IOS-arm64 ..'
      workingDirectory: build_ios_device
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Debug'))
  - task: CMake@1
    displayName: CMake build for iOS device
    inputs:
      cmakeArgs: '--build . -- -j4'
      workingDirectory: build_ios_device
  - bash: |
      . ci/apple/apple-functions.sh
      build_ios_universal_framework '$(OutputDirectory)' '$(FrameworkName)'
    displayName: Create universal framework
  - bash: |
      . ci/apple/apple-functions.sh
      build_dsym_bundle "build_ios_device/lib" "$(FrameworkName)"
      build_dsym_bundle "build_ios_simulator/lib" "$(FrameworkName)"
      combine_dsym_bundles "$(OutputDirectory)" "build_ios_"{device,simulator}"/lib/$(FrameworkName).framework.dSYM" "$(FrameworkName)"
    condition: and(succeeded(), or(eq(variables['BuildConfiguration'], 'Debug'), eq(variables['BuildConfiguration'], 'Release')))
    displayName: Create debug symbols
  - bash: |
      cd "$(OutputDirectory)"
      zip --symlinks -r "$(VersionedFrameworkName).framework.dSYM.zip" "$(FrameworkName).framework.dSYM"
      rm -rf "$(OutputDirectory)/$(FrameworkName).framework.dSYM"
    condition: and(succeeded(), or(eq(variables['BuildConfiguration'], 'Debug'), eq(variables['BuildConfiguration'], 'Release')))
    displayName: Archive debug symbols
  - bash: |
      strip -x "$(OutputDirectory)/$(FrameworkName).framework/$(FrameworkName)"
    displayName: Strip dynamic library in universal framework for release builds
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - bash: |
      cp -p "$(Build.Repository.LocalPath)/"{REDIST.txt,license.md,ThirdPartyNotices.md} "$(OutputDirectory)"
      cd "$(OutputDirectory)"
      zip --symlinks -r "$(VersionedFrameworkName).zip" REDIST.txt license.md ThirdPartyNotices.md "$(FrameworkName).framework"
      rm -rf REDIST.txt license.md ThirdPartyNotices.md "$(FrameworkName).framework"
    displayName: Create archive for signing
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign iOS framework'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: '$(OutputDirectory)'
      Pattern: $(VersionedFrameworkName).zip
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_IOS)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      # .zip from ESRP puts the content in a deep sub directory.
      # We re-zip it, and rename it to include the version number.
      set -e -o pipefail -x
      mkdir temp
      cd temp
      unzip '$(OutputDirectory)/$(VersionedFrameworkName).zip'
      # Remove original package.
      rm '$(OutputDirectory)/$(VersionedFrameworkName).zip'
      cd "$(find . -type d -name $(FrameworkName).framework -prune)"
      cd ..
      zip --symlinks -r '$(OutputDirectory)/$(VersionedFrameworkName).zip' .
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
    displayName: Package signed framework
  - bash: |
      set -e -o pipefail -x
      # set up framework in the correct position - the Xcode project expects the framework here (used for both Release and Debug configs atm)
      mkdir -p '$(Build.Repository.LocalPath)/xcode-build-output'
      pushd '$(Build.Repository.LocalPath)/xcode-build-output'
      unzip "$(OutputDirectory)/$(VersionedFrameworkName).zip"
      popd
      # run the test
      eval $(perl ci/evaluate-test-config.pl --verbose --format bash-variable --input ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman))
      xcodebuild test -project tests/functional/objective-c/ios/SpeechSDK_iOS.xcodeproj \
          -scheme SpeechSDK_iOS \
          -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.4' \
          SUBSCRIPTION_KEY="$SPEECHSDK_SPEECH_KEY" SERVICE_REGION="$SPEECHSDK_SPEECH_REGION"
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'), eq(variables['SPEECHSDK_RUN_TESTS'],'true'))
    displayName: "Run simple iOS test"
  - bash: |
      set -u -e -o pipefail -x
      . ci/functions.sh
      # set up framework in the correct position - the Xcode project expects the framework here (used for both Release and Debug configs atm)
      ln -s '$(Build.Repository.LocalPath)/xcode-build-output/$(FrameworkName).framework' public_samples/quickstart/objectivec-ios/
      # fix the keys
      patchSamplesFromTestConfig public_samples/quickstart/objectivec-ios/helloworld/helloworld \
        ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman)
      # run the test
      xcodebuild test -project public_samples/quickstart/objectivec-ios/helloworld/helloworld.xcodeproj \
          -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.4' \
          -scheme helloworldUITests
    displayName: "Run iOS quickstart UI test"
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'), eq(variables['SPEECHSDK_RUN_TESTS'],'true'))
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(BuildPlatform)'
      ArtifactName: "$(BuildPlatform)"
      publishLocation: Container
    condition: succeededOrFailed()

- job: OsxBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' OsxBuild '))
  pool:
    name: Hosted macOS Preview
  timeoutInMinutes: 60
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
        BuildPlatform: x64
      release:
        BuildConfiguration: Release
        BuildPlatform: x64
  variables:
    BuildPlatform: macOS
    FrameworkName: MicrosoftCognitiveServicesSpeech
    OutputDirectory: $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set OSX-x64 target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM OSX-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - task: CMake@1
    displayName: Generate makefiles
    inputs:
      cmakeArgs: '-DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM) -DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA) ..'
  - task: CMake@1
    displayName: CMake build
    inputs:
      cmakeArgs: '--build . -- -j4'
  - template: test-during-build.yml
  - bash: |
      . ci/apple/apple-functions.sh
      build_dsym_bundle "build/lib" "$(FrameworkName)"
    condition: and(succeeded(), or(eq(variables['BuildConfiguration'], 'Debug'), eq(variables['BuildConfiguration'], 'Release')))
    displayName: Create debug symbols
  - bash: |
      mkdir -p "$(OutputDirectory)"
      mv "build/lib/$(FrameworkName).framework.dSYM" "$(OutputDirectory)"
      cd "$(OutputDirectory)"
      zip --symlinks -r "$(FrameworkName)-$(BuildPlatform)-$(SPEECHSDK_SEMVER2NOMETA).framework.dSYM.zip" "$(FrameworkName).framework.dSYM"
      rm -rf "$(OutputDirectory)/$(FrameworkName).framework.dSYM"
    condition: and(succeeded(), or(eq(variables['BuildConfiguration'], 'Debug'), eq(variables['BuildConfiguration'], 'Release')))
    displayName: Archive debug symbols
  - bash: |
      strip -x "build/lib/$(FrameworkName).framework/$(FrameworkName)"
    displayName: Strip dynamic library in universal framework for release builds
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))
  - bash: |
      mv "build/lib/$(FrameworkName).framework" "$(OutputDirectory)"
      cp -p "$(Build.Repository.LocalPath)/"{REDIST.txt,license.md,ThirdPartyNotices.md} "$(OutputDirectory)"
      cd "$(OutputDirectory)"
      zip --symlinks -r "$(FrameworkName)-$(BuildPlatform)-$(SPEECHSDK_SEMVER2NOMETA).zip" REDIST.txt license.md ThirdPartyNotices.md "$(FrameworkName).framework"
      rm -rf REDIST.txt license.md ThirdPartyNotices.md "$(FrameworkName).framework"
    displayName: Create archive for signing
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: macOS
      publishLocation: Container
      # condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release'))

- job: JsBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JsBuild '))
  pool:
    name: Hosted VS2017
    demands: npm
  variables:
    NPM_REGISTRY: https://csspeechstorage.blob.core.windows.net/npm/de13462a
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: Npm@1
    displayName: 'npm run build'
    inputs:
      command: custom
      workingDir: source/bindings/js
      verbose: false
      customCommand: 'run build'
  - task: Npm@1
    displayName: 'npm version'
    inputs:
      command: custom
      workingDir: source/bindings/js
      verbose: false
      customCommand: version $(SPEECHSDK_SEMVER2NOMETA)
  - bash: |
      F=source/bindings/js/src/common.speech/RecognizerConfig.ts
      perl -i.bak -p -e 'BEGIN { $c = 0 } $c += s/(?<=const SPEECHSDK_CLIENTSDK_VERSION = ")[^"]*/$(SPEECHSDK_SEMVER2NOMETA)/g; END { die "Patched SPEECHSDK_CLIENTSDK_VERSION $c time(s), expected 1.\n" if $c != 1 }' "$F"
      E=$?
      rm -f "$F.bak"
      git diff
      exit $E
    displayName: Stamp SPEECHSDK_CLIENTSDK_VERSION
  - task: Npm@1
    displayName: 'npm run bundle'
    inputs:
      command: custom
      workingDir: source/bindings/js
      verbose: false
      customCommand: 'run bundle'
  - task: Npm@1
    displayName: 'npm tests installer'
    inputs:
      workingDir: tests/functional/js/Unit
      verbose: false
  - bash: |
      perl ci/evaluate-test-config.pl --verbose --format azuredevops-variable --input ci/test-config.json \
        -D luis-key=$(luis-westus-s0-201809-key1) \
        -D speech-key=$(NorthEuropeKeySkyman)
    displayName: Set test variables
  - script: RunTests.cmd SpeechSubscriptionKey:$(SPEECHSDK_SPEECH_KEY) SpeechRegion:$(SPEECHSDK_SPEECH_REGION) LuisSubscriptionKey:$(SPEECHSDK_LUIS_KEY) LuisRegion:$(SPEECHSDK_LUIS_REGION) SpeechTestModelId:$(SPEECHSDK_SPEECH_ENDPOINTID_ENUS)
    displayName: 'Run tests'
    workingDirectory: tests/functional/js/Unit
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/TEST-*.xml'
    condition: eq(variables['SPEECHSDK_RUN_TESTS'],'true')
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-tslint.TSLint@1
    displayName: 'Run TSLint'
    enabled: false
  - task: Npm@1
    displayName: 'npm pack'
    inputs:
      command: custom
      workingDir: source/bindings/js
      verbose: false
      customCommand: 'pack'
  - bash: |
      set -e -o pipefail -x
      PACKAGE_BASE=microsoft-cognitiveservices-speech-sdk
      PACKAGE_NAME=$PACKAGE_BASE-$SPEECHSDK_SEMVER2NOMETA.tgz
      PACKAGE_IN=source/bindings/js/$PACKAGE_NAME
      PACKAGE_OUT="$(Build.ArtifactStagingDirectory)/Out/JavaScript/npm"
      QUICKSTART_OUT="$(Build.ArtifactStagingDirectory)/Out/JavaScript/js-browser"
      ZIP_OUT="$(Build.ArtifactStagingDirectory)/Out/JavaScript/SpeechSDK-JavaScript-$SPEECHSDK_SEMVER2NOMETA"
      mkdir -p "$PACKAGE_OUT" "$ZIP_OUT"
      ./ci/generate-npm-index-json.sh "$PACKAGE_IN" "$SPEECHSDK_SEMVER2NOMETA" "$(NPM_REGISTRY)" > "$PACKAGE_OUT/$PACKAGE_BASE"
      cp --preserve "$PACKAGE_IN" "$PACKAGE_OUT"
      cp --preserve --recursive public_samples/quickstart/js-browser "$QUICKSTART_OUT"
      cp --preserve source/bindings/js/distrib/microsoft.cognitiveservices.speech.sdk.bundle.* "$QUICKSTART_OUT"
      echo SRI hash for microsoft.cognitiveservices.speech.sdk.bundle.js: sha512-"$(openssl dgst -sha512 -binary source/bindings/js/distrib/microsoft.cognitiveservices.speech.sdk.bundle.js | openssl base64 -A)"
      cp --preserve license.md REDIST.txt source/bindings/js/distrib/microsoft.cognitiveservices.speech.sdk.bundle.* "$ZIP_OUT"
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(Build.ArtifactStagingDirectory)/Out/JavaScript/SpeechSDK-JavaScript-$(SPEECHSDK_SEMVER2NOMETA)
      includeRootFolder: true
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/Out/JavaScript/SpeechSDK-JavaScript-$(SPEECHSDK_SEMVER2NOMETA).zip
    displayName: 'Create .zip'
  - bash: rm -rf "$(Build.ArtifactStagingDirectory)/Out/JavaScript/SpeechSDK-JavaScript-$(SPEECHSDK_SEMVER2NOMETA)"
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out/JavaScript'
      ArtifactName: JavaScript
      publishLocation: Container

- job: Doxygen
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' Doxygen '))
  pool:
    name: Hosted macOS Preview
  timeoutInMinutes: 30
  variables:
    ArtifactOut: $(Build.ArtifactStagingDirectory)/Out
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -e -o pipefail
      cat "$0"
      ASTOUT="$(ArtifactOut)/objc/ast"
      MDOUT="$(ArtifactOut)/objc/md"
      mkdir -p "$ASTOUT" "$MDOUT"
      clang -fsyntax-only -x objective-c -Xclang -ast-dump source/bindings/objective-c/public/SPXSpeechApi.h \
        1> "$ASTOUT/stdout.txt" 2> "$ASTOUT/stderr.txt"
      cd "$MDOUT"
      perl "$(Build.Repository.LocalPath)/ci/objc-docs-ast-to-md.pl" "$ASTOUT/stdout.txt"
    displayName: Create Objective-C reference docs
  - bash: |
      set -e -o pipefail
      brew install doxygen
      cd ci/doxygen
      mkdir -p "$(ArtifactOut)"
      rm -f doxygen.log || true
      touch doxygen.log
      for lang in c cpp csharp java; do
        (
          cat ${lang}_doxygen.txt
          echo PROJECT_NUMBER=$(SPEECHSDK_SEMVER2)
          echo 'WARN_FORMAT="##''vso[task.logissue type=warning;sourcepath=$file;linenumber=$line;columnnumber=1]$text"'
          echo OUTPUT_DIRECTORY="$(ArtifactOut)"
          echo QUIET=YES
          echo WARN_AS_ERROR=NO
        ) | doxygen - 2>&1 | ( grep -v 'Internal inconsistency: member .* does not belong to any container' || true ) | tee -a doxygen.log
      done
      [[ -s doxygen.log ]] && {
        cat <<'HERE'
      Warnings occurred when running Doxygen. Please address them.

      Note:

      * We typically do not document protected members (Java, C++):
        Hide them at the source level by enclosing in the following Doxygen mark-up:

          /*! \cond PROTECTED */`
          ...
          /*! \endcond */

      * In Java, we also use the following mark-up for public things that really should be internal:

          /*! \cond INTERNAL */`
          ...
          /*! \endcond */

      * For things you do not know how to resolve contact cfdev.
      HERE
        exit 1
      }
      git clone https://github.com/sourcey/moxygen.git
      cd moxygen
      git checkout c00d16803a6dfc40796cd4b76271c481ed865243
      git apply ../0001-Provide-shortname-provide-plain.patch
      npm install
      cd ..
      node moxygen/bin/moxygen.js -o cppapi.md -t ./moxygen_template/cpp -a "$(ArtifactOut)/cppxml"
      powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NonInteractive doxmox2docs.ps1 \
        -DoxygenIndexXml "$(ArtifactOut)/cppxml/index.xml" \
        -MoxygenApiMd cppapi.md \
        -OutputDir "$(ArtifactOut)/cppmd"
    displayName: Create documentation artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(ArtifactOut)
      ArtifactName: Doxygen
      publishLocation: Container

- job: WindowsSDLFortifyJava
  dependsOn: [Pre, WindowsBuild]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsSDLFortifyJava '))
  pool:
    name: Carbon
    demands: FORTIFY
  timeoutInMinutes: 30
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download JAR Build Artifacts'
    inputs:
      artifactName: Windows
      itemPattern: '**/*.jar'
  - task: PowerShell@2
    displayName: 'Extract internal classes from JAR SDK Artifacts'
    inputs:
      type: FilePath
      filePath: './ci/sdl/PruneJar.ps1'
      arguments: '-InputJarName $(System.ArtifactsDirectory)\Windows\x64\Release\public\lib\com.microsoft.cognitiveservices.speech.jar -OutputDir $(Build.BinariesDirectory)\PruneJar'
  - task: ArchiveFiles@2
    displayName: 'Create internal.JAR'
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)\PruneJar'
      includeRootFolder: false
      archiveFile: '$(Build.ArtifactStagingDirectory)/class/internal.jar'
  - task: fortifyvsts.hpe-security-fortify-vsts.build-task-fortify-sca.FortifySCA@1
    displayName: 'Run Fortify on JAVA source files'
    inputs:
      applicationType: java
      buildClasspath: '$(Build.ArtifactStagingDirectory)/class/internal.jar'
      buildSourceVersion: 1.8
      fortifySourceTranslate: 'source/bindings/java/**/*.java'
      fortifyBuildId: 1.2.3
      scaVerbose: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts from Fortify'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/sca_artifacts'
      ArtifactName: sca_artifacts
      condition: succeededOrFailed()
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'SDL Fortify Post Analysis'
    inputs:
      FortifySCA: true
      VstsConsole: false
    # Currently disabled, we know we have false-positives.
    # Once we can solve the problem of the false-positives we can change this.
    # In that case we should move this part of the build also into the WindowsSdlBuild phase.
    enabled: false

- job: CheckSignatures
  dependsOn: [Pre, NuGet, AndroidPackage, JavaJrePackage]
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' CheckSignatures '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 10
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'NuGet Installer'
    inputs:
      versionSpec: 4.6.0
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts Windows'
    inputs:
      artifactName: Windows
      itemPattern: '**/*.nupkg'
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts Android'
    inputs:
      artifactName: Android
      itemPattern: '**/*.aar'
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build JavaJrePackage'
    inputs:
      artifactName: JavaJrePackage
      itemPattern: '**/*.jar'
  - task: PowerShell@2
    displayName: 'Check Signatures'
    inputs:
      type: FilePath
      filePath: './ci/build/sigcheck.ps1'
      arguments: '-RootDirectory $(System.ArtifactsDirectory)'

