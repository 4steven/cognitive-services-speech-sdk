
parameters:
  crt: PUBLIC_VCRT
  name: Windows
  kws: true
  suffix: ''
  continueOnTestFailure: false
jobs:
- job: ${{ parameters.name }}Build
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' ${{ parameters.name }}Build '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 360
  strategy:
    maxParallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  variables:
    OutputDirectory: $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)
  steps:
  - script: |
      echo ##vso[task.prependpath]C:\Program Files\Git\mingw64\bin
      echo ##vso[task.prependpath]C:\Program Files\Git\usr\bin
      echo ##vso[task.prependpath]C:\Program Files\Git\bin
    displayName: Work around for recent broken system path on Hosted VS2017 build agents.
    # see ICM https://icm.ad.msft.net/imp/v3/incidents/details/171621867/home
    # see PR  https://github.com/actions/virtual-environments/pull/211/files that broke many bash commands on Hosted VS2017 build agents.
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
          vsts_setvar SPEECHSDK_PYTHON_PLATFORM "x86"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
          vsts_setvar SPEECHSDK_PYTHON_PLATFORM "x64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
        vsts_setvar SPEECHSDK_ENABLE_KWS ${{ parameters.kws }}
        vsts_setvar SPEECHSDK_ENABLE_UNIDEC true
        vsts_setvar EXTENSION_AUDIOCOMPRESSION_ENABLED true
        vsts_setvar VSTS_TOKEN "$(System.AccessToken)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: . ./ci/functions.sh && vsts_setvar SPEECHSDK_SPECTRE_MITIGATION false
    displayName: Reset SPEECHSDK_SPECTRE_MITIGATION in Debug
    condition: eq(variables['BuildConfiguration'], 'Debug')
  - template: get-kws-artifact.yml
    parameters:
      enableVariable: SPEECHSDK_ENABLE_KWS
      os: Windows
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - bash: |
      rm -f ./tests/test.subscriptions.regions.json
      cat > ./tests/test.subscriptions.regions.json <<HEREDOC
        $(KEYS_AND_REGIONS)
      HEREDOC
    displayName: Write Subscriptions Regions Data
  - bash: |
      set -u -e -o pipefail
      . ci/functions.sh
      echo external/gstreamer-windows/build_id_$(SPEECHSDK_TARGET_PLATFORM).txt
      build_id=$( cat  external/gstreamer-windows/build_id_$(SPEECHSDK_TARGET_PLATFORM).txt )
      build_id_devel=$( cat  external/gstreamer-windows/build_id_devel_$(SPEECHSDK_TARGET_PLATFORM).txt )
      vsts_setvar GSTREAMER_WINDOWS_PREBUILT_ARTIFACT_BUILD_ID "$build_id"
      vsts_setvar GSTREAMER_WINDOWS_PREBUILT_ARTIFACT_DEVEL_BUILD_ID "$build_id_devel"
      gst_path="$(cygpath -pw $(pwd)/gstreamer)"
      gst_path_win=${gst_path//[\\]//}
      vsts_setvar GSTREAMER_INSTALL_PATH "$gst_path_win"
    displayName: Get Gstreamer Windows build ID
  - task: DownloadBuildArtifacts@0
    displayName: Download gstreamer-windows devel package
    inputs:
      buildType: specific
      project: 'e71f1362-9c7d-488b-99c7-3376db8d3302'
      pipeline: 9377
      buildVersionToDownload: specific
      buildId: $(GSTREAMER_WINDOWS_PREBUILT_ARTIFACT_DEVEL_BUILD_ID)
      downloadType: specific
      itemPattern: |
        gstreamer-windows/**
      downloadPath: external
  - task: DownloadBuildArtifacts@0
    displayName: Download gstreamer-android runtime package
    inputs:
      buildType: specific
      project: 'e71f1362-9c7d-488b-99c7-3376db8d3302'
      pipeline: 9377
      buildVersionToDownload: specific
      buildId: $(GSTREAMER_WINDOWS_PREBUILT_ARTIFACT_BUILD_ID)
      downloadType: specific
      itemPattern: |
        gstreamer-windows/**
      downloadPath: external
  - powershell: |
      $plat = "$(BuildPlatform)"
      move .\external\gstreamer-windows\* .
      dir
      echo $pwd\gstreamer
      If($plat -Match "x64")
      {
        msiexec /passive INSTALLDIR=$pwd\gstreamer /i gstreamer-1.0-x86_64-1.14.5.msi | Out-String
        Start-Sleep -Seconds 30
        msiexec /passive INSTALLDIR=$pwd\gstreamer /i gstreamer-1.0-devel-x86_64-1.14.5.msi | Out-String
      }
      If($plat -Match "Win32")
      {
        msiexec /passive INSTALLDIR=$pwd\gstreamer /i gstreamer-1.0-x86-1.14.5.msi | Out-String
        Start-Sleep -Seconds 30
        msiexec /passive INSTALLDIR=$pwd\gstreamer /i gstreamer-1.0-devel-x86-1.14.5.msi | Out-String
      }
      Start-Sleep -Seconds 30
      dir $pwd\gstreamer
    displayName: msiexec gstreamer
  - bash: |
      find ./ -type d -print | sed -e 's;[^/]*/; /;g;s;/ ;    ;g;s;^ /$;.;;s; /;|-- ;g'
    displayName: some logging
  - task: CMake@1
    displayName: Generate solution
    inputs:
      cmakeArgs: >-
        -G "$(SPEECHSDK_CMAKE_GENERATOR)"
        -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM)
        -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE)
        -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA)
        -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION)
        -DEXTENSION_KWS_ENABLED=$(SPEECHSDK_ENABLE_KWS)
        -DSPEECHSDK_CRT="${{ parameters.crt }}"
        -DEXTENSION_AUDIOCOMPRESSION_ENABLED=$(EXTENSION_AUDIOCOMPRESSION_ENABLED)
        -DEXTENSION_UNIDEC_ENABLED=$(SPEECHSDK_ENABLE_UNIDEC)
        -DEXTENSION_CODEC_ENABLED=true        
        -DGST_ROOT=$(GSTREAMER_INSTALL_PATH)
        ..
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
  - bash: |
      set -u -x -e -o pipefail
      mkdir -p dist repack $(cygpath -au "$(OutputDirectory)\wheelhouse")
    displayName: Generate output directory
  - bash: |
      set -u -x -e -o pipefail
      . ci/functions.sh
      pythonMajorMinorVersions=(3.8 3.7 3.6 3.5)
      pythonBasePath=C:/hostedtoolcache/windows/Python
      coreLib=build/bin/$(BuildConfiguration)/Microsoft.CognitiveServices.Speech.core.pdb
      coreHash=($(md5sum ${coreLib}))
      pythonExtension=build/azure/cognitiveservices/speech/_speech_py_impl.pdb # extension is .so on Linux and OSX
      libs=($coreLib $pythonExtension)
      if [[ $(SPEECHSDK_ENABLE_KWS) == true ]]; then
        kwsLib=build/bin/$(BuildConfiguration)/Microsoft.CognitiveServices.Speech.extension.kws.pdb
        libs+=($kwsLib)
        kwsHash=($(md5sum ${kwsLib}))
      fi
      pdbDir="$(OutputDirectory)/pdb-$(BuildPlatform)-$(BuildConfiguration)-py"
      mkdir -p "$pdbDir"
      for lib in ${libs[@]}; do
        [[ $lib == ${pythonExtension} ]] || cp -p "${lib}" "$pdbDir"
      done
      for pythonMajorMinorWithDot in ${pythonMajorMinorVersions[*]}; do
        thisPythonVersionBasePath=$(getLatest ${pythonBasePath}/${pythonMajorMinorWithDot}.*)
        wheelPythonVersion=${pythonMajorMinorWithDot//./}
        # reconfigure for python build
        cmake . -Bbuild -DBUILD_PYTHON=ON -DBUILD_CSHARP=OFF -DBUILD_JAVA=OFF \
          -DPYTHON_EXECUTABLE:FILEPATH="${thisPythonVersionBasePath}"/$(SPEECHSDK_PYTHON_PLATFORM)/python.exe \
          -DPYTHON_LIBRARY="${thisPythonVersionBasePath}"/$(SPEECHSDK_PYTHON_PLATFORM)/libs/python${wheelPythonVersion}.lib \
          -DPYTHON_INCLUDE_DIR:PATH="${thisPythonVersionBasePath}"/$(SPEECHSDK_PYTHON_PLATFORM)/include \
          -DEXTENSION_UNIDEC_ENABLED=$(SPEECHSDK_ENABLE_UNIDEC)
        cmake --build build --target bdist -j 4 --config $(BuildConfiguration)
        # check that the core & kws lib are identical in all wheels
        [[ $(md5sum $coreLib) == ${coreHash[0]}* ]] || exitWithError "core lib changed between Python builds"
        if [[ $(SPEECHSDK_ENABLE_KWS) == true ]]; then
          [[ $(md5sum $kwsLib) == ${kwsHash[0]}* ]] || exitWithError "kws lib changed between Python builds"
        fi
        # archive the pdb for the python bindings lib
        pdbDirThisPythonVersion="$pdbDir/${wheelPythonVersion}"
        mkdir -p "$pdbDirThisPythonVersion"
        cp -v ${pythonExtension} "$pdbDirThisPythonVersion"
        # copy wheel
        cp -v build/dist/*.whl dist
        if [[ $(SPEECHSDK_SIGN) == true ]]; then
          unzip -d repack/${wheelPythonVersion} dist/*cp${wheelPythonVersion}*.whl
          # Remove *.dist-info/RECORD, otherwise "wheel pack" seem to pack it
          # twice on Windows (zipfile.py warns: UserWarning: Duplicate name:
          # 'azure_cognitiveservices_speech-.../RECORD)
          rm repack/${wheelPythonVersion}/*.dist-info/RECORD
        fi
      done
      # copy wheels to build/ for tests
      cp -v dist/*.whl build/
    displayName: Build Python wheels
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: Sign Python
    inputs:
      ConnectedServiceName: Speech SDK ESRP Signing Alternate
      FolderPath: repack
      Pattern: '*.pyd,Microsoft.CognitiveServices.Speech.core.dll,Microsoft.CognitiveServices.Speech.extension.kws.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -u -x -e -o pipefail
      python -m pip install wheel==0.33.6
      mv repack/CodeSignSummary-*.md .
      for wheelPythonVersion in 35 36 37 38; do
        python -m wheel pack --dest-dir $(cygpath -au "$(OutputDirectory)\wheelhouse") repack/${wheelPythonVersion}
        rm -rf repack/${wheelPythonVersion}
      done
    displayName: Repack .whl
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      cp -v dist/*.whl $(cygpath -au "$(OutputDirectory)\wheelhouse")
    displayName: Archive unsigned wheels
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'false'))
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Windows C++, C# and Java binaries'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing Alternate'
      FolderPath: 'build/bin'
      Pattern: 'Microsoft.CognitiveServices.Speech.core${{ parameters.suffix }}.dll,Microsoft.CognitiveServices.Speech.extension.kws${{ parameters.suffix }}.dll,Microsoft.CognitiveServices.Speech.csharp.dll,Microsoft.CognitiveServices.Speech.java.bindings.dll,Microsoft.CognitiveServices.Speech.extension.codec.dll,Microsoft.CognitiveServices.Speech.extension.silk_codec.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - template: test-during-build.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      extraTests:
        - bash: |
            ./ci/run-tests.sh \
              --test-configuration ci/test-config.json \
              --build-dir build \
              --platform Windows-x64-Release \
              --timeout 120m \
              -D luis-key=$(luis-westus-s0-201809-key1) \
              -D speech-key=$(NorthEuropeKeySkyman) \
              -D virtualassistant-region=$(DialogRegion) \
              -D virtualassistant-subscription=$(DialogSubscriptionKey) \
              -D virtualassistant-testbot=$(DialogFunctionalTestBot) \
              -D conversationtranscriber-ppe-key=$(ConverstationTranscriptionKeyWestUS220190509) \
              -D conversationtranscriber-prod-key=$(ConverstationTranscriptionKeyCentralUS20190509) \
              -D long-running=true \
              -- csharp_unit_tests
          displayName: Run LongRunning tests
          condition: and(eq(variables['SPEECHSDK_RUN_TESTS'], 'true'), eq(variables['SPEECHSDK_BUILD_TYPE'], 'int'), eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildConfiguration'], 'Release'))
          continueOnError: ${{ parameters.continueOnTestFailure }}
  - bash: |
      ./ci/drop/bindrop.sh $(BuildPlatform) $(BuildConfiguration) "$(cygpath -au "$(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)")" false
    displayName: Create drop files
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: ${{ parameters.name }}
      publishLocation: Container
