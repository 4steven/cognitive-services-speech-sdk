
parameters:
  crt: PUBLIC_VCRT
  name: Windows
  kws: true
  suffix: ''
  continueOnTestFailure: false
jobs:
- job: ${{ parameters.name }}Build
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' ${{ parameters.name }}Build '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 150
  strategy:
    maxParallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
        vsts_setvar SPEECHSDK_ENABLE_KWS ${{ parameters.kws }}
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: . ./ci/functions.sh && vsts_setvar SPEECHSDK_SPECTRE_MITIGATION false
    displayName: Reset SPEECHSDK_SPECTRE_MITIGATION in Debug
    condition: eq(variables['BuildConfiguration'], 'Debug')
  - template: get-kws-artifact.yml
    parameters:
      enableVariable: SPEECHSDK_ENABLE_KWS
      os: Windows
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - task: CMake@1
    displayName: Generate solution
    inputs:
      cmakeArgs: >-
        -G "$(SPEECHSDK_CMAKE_GENERATOR)"
        -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM)
        -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE)
        -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA)
        -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION)
        -DEXTENSION_KWS_ENABLED=$(SPEECHSDK_ENABLE_KWS)
        -DSPEECHSDK_CRT="${{ parameters.crt }}"
        ..
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: 'build/carbon.sln'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      maximumCpuCount: true
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Windows C++, C# and Java binaries'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing'
      FolderPath: 'build/bin'
      Pattern: 'Microsoft.CognitiveServices.Speech.core${{ parameters.suffix }}.dll,Microsoft.CognitiveServices.Speech.extension.kws${{ parameters.suffix }}.dll,Microsoft.CognitiveServices.Speech.csharp.dll,Microsoft.CognitiveServices.Speech.java.bindings.dll'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_DLL)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - template: test-during-build.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      extraTests:
        - bash: |
            ./ci/run-tests.sh \
              --test-configuration ci/test-config.json \
              --build-dir build \
              --platform Windows-x64-Release \
              --timeout 120m \
              -D luis-key=$(luis-westus-s0-201809-key1) \
              -D speech-key=$(NorthEuropeKeySkyman) \
              -D virtualassistant-region=$(BotRegion) \
              -D virtualassistant-subscription=$(BotSubscriptionKey) \
              -D virtualassistant-testbot=$(BotFunctionalTest) \
              -D conversationtranscriber-ppe-key=$(ConverstationTranscriptionKeyWestUS220190509) \
              -D conversationtranscriber-prod-key=$(ConverstationTranscriptionKeyCentralUS20190509) \
              -D long-running=true \
              -- csharp_unit_tests
          displayName: Run LongRunning tests
          condition: and(eq(variables['SPEECHSDK_RUN_TESTS'], 'true'), eq(variables['SPEECHSDK_BUILD_TYPE'], 'int'), eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildConfiguration'], 'Release'))
          continueOnError: ${{ parameters.continueOnTestFailure }}
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Create drop files
    inputs:
      type: FilePath
      scriptPath: './ci/drop/bindrop.sh'
      args: '$(BuildPlatform) $(BuildConfiguration) $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)'
  - task: PublishBuildArtifacts@1
    displayName: Publish drop
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: ${{ parameters.name }}
      publishLocation: Container
