parameters:
  jobName: "macOSUnitTests"
  jobDependsOn: "Pre"
  buildPlatform: macOS
  continueOnTestFailure: false
  extraSteps: []

jobs:
- job: ${{ parameters.jobName }}
  dependsOn:
    - ${{ parameters.jobDependsOn }}
  condition: |
    and(
      succeeded(),
      contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' ${{ parameters.jobName }} '),
      eq(dependencies.Pre.outputs['var.SPEECHSDK_RUN_TESTS'], 'true')
    )
  pool:
    name: Hosted macOS
  timeoutInMinutes: 40
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfiguration: Debug
      release:
        BuildConfiguration: Release
  variables:
    BuildPlatform: ${{ parameters.buildPlatform }}
    FrameworkName: MicrosoftCognitiveServicesSpeech
    VersionedFrameworkName: $(FrameworkName)-$(BuildPlatform)-$(SPEECHSDK_SEMVER2NOMETA)
    OutputDirectory: $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/Out/$(BuildConfiguration)
    GStreamerWrapper: GStreamerWrapper
  steps:
  - bash: brew config && brew install bash coreutils
    displayName: Install modern bash and coreutils
  - bash: sudo xcode-select -s /Applications/Xcode_10.3.app/Contents/Developer
    displayName: Select XCode Version 10.3
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set target platform
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        vsts_setvar SPEECHSDK_TARGET_PLATFORM $(BuildPlatform)-x64
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
        vsts_setvar SPEECHSDK_ENABLE_CODEC false
  - task: DownloadBuildArtifacts@0
    displayName: Download build products
    inputs:
      artifactName: $(BuildPlatform)
      ${{ if eq(parameters['buildPlatform'], 'iOS') }}:
        itemPattern: "$(BuildPlatform)/$(BuildConfiguration)/@($(VersionedFrameworkName)|$(GStreamerWrapper)).zip"
      ${{ if ne(parameters['buildPlatform'], 'iOS') }}:
        itemPattern: "$(BuildPlatform)/$(BuildConfiguration)/$(VersionedFrameworkName).zip"
  - bash: |
      set -e -o pipefail -x
      mkdir -p "$(OutputDirectory)/logs"
      # set up framework in the correct position - the Xcode project expects the framework here
      mkdir -p '$(Build.Repository.LocalPath)/xcode-build-output'
      unzip "$(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)/$(VersionedFrameworkName).zip" -d '$(Build.Repository.LocalPath)/xcode-build-output'
      if [[ $(SPEECHSDK_ENABLE_CODEC) == true ]]; then
        [[ $(buildPlatform) != iOS ]] || \
        unzip "$(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)/$(GStreamerWrapper).zip" -d '$(Build.Repository.LocalPath)/xcode-build-output'
      fi
      # runtests.sh requires the build directory to exist
      mkdir -p build/bin/$(BuildConfiguration)
    condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
    displayName: "Prepare for objective-C unit tests"
  - ${{ if eq(parameters['jobName'], 'IosUnitTests') }}:
    - bash: |
        set -e -o pipefail -x
        ci/apple/prepare-pods-for-swift-test.sh tests/functional/objective-c/ios/SpeechSDKSwift '$(Build.Repository.LocalPath)/xcode-build-output'
      condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
      displayName: "Prepare for Swift unit tests"
  - template: test-during-build.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      testsToRun: objectivec_unittests swift_unittests
      runTestArgs: ""
      extraTests:
        - ${{ if eq(parameters['jobName'], 'IosUnitTests') }}:
          - bash: |
              set -e -o pipefail -x
              PROJECT_DIR=public_samples/quickstart/swift/ios/from-microphone/helloworld/
              ci/samples/build-quickstart-swift.sh "${PROJECT_DIR}" '$(Build.Repository.LocalPath)/xcode-build-output' "$(OutputDirectory)/logs" ios-swift-quickstart $(BuildPlatform)
            condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
            displayName: "Test building STT Swift quickstart on iOS"
            continueOnError: ${{ parameters.continueOnTestFailure }}
          - bash: |
              set -e -o pipefail -x
              PROJECT_DIR=public_samples/quickstart/swift/ios/text-to-speech/helloworld/
              ci/samples/build-quickstart-swift.sh "${PROJECT_DIR}" '$(Build.Repository.LocalPath)/xcode-build-output' "$(OutputDirectory)/logs" ios-swift-tts-quickstart $(BuildPlatform)
            condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
            displayName: "Test building TTS Swift quickstart on iOS"
            continueOnError: ${{ parameters.continueOnTestFailure }}
        - ${{ if eq(parameters['jobName'], 'macOsUnitTests') }}:
          - bash: |
              set -e -o pipefail -x
              PROJECT_DIR=public_samples/quickstart/swift/macos/from-microphone/helloworld/
              ci/samples/build-quickstart-swift.sh "${PROJECT_DIR}" '$(Build.Repository.LocalPath)/xcode-build-output' "$(OutputDirectory)/logs" ios-swift-quickstart $(BuildPlatform)
            condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
            displayName: "Test building STT Swift quickstart on macOS"
            continueOnError: ${{ parameters.continueOnTestFailure }}
          - bash: |
              set -e -o pipefail -x
              PROJECT_DIR=public_samples/quickstart/swift/macos/text-to-speech/helloworld/
              ci/samples/build-quickstart-swift.sh "${PROJECT_DIR}" '$(Build.Repository.LocalPath)/xcode-build-output' "$(OutputDirectory)/logs" ios-swift-tts-quickstart $(BuildPlatform)
            condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
            displayName: "Test building TTS Swift quickstart on macOS"
            continueOnError: ${{ parameters.continueOnTestFailure }}
  - ${{ parameters.extraSteps }}
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(BuildPlatform)/Out'
      ArtifactName: '$(BuildPlatform)'
      publishLocation: Container
    displayName: Publish drop
    condition: succeededOrFailed()

