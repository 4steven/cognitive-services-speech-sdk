parameters:
  speechKey: "$(WestUSLatencyTestSpeechKey)"
  region: "westus"
  usePublicSDK: false
  runLatencyTests: eq(variables['Build.Reason'], 'Schedule')
  PythonVersion: 3.6
  Platform: x64
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: ${{ parameters.PythonVersion }}
    addToPath: true
    architecture: ${{ parameters.Platform }}
- bash: |
    set -u -e -o pipefail 
    if [[ "${{ parameters.usePublicSDK }}" == 'true' ]]
    then
      echo installing latest public pip package.
      python3 -m pip install azure-cognitiveservices-speech
    else
      echo installing wheel file from this build.
      MAJORMINOR=$(python3 -c "import sys; print('%s%s' % (sys.version_info[0:2]))")
      pathToWheel=$(find -iname *cp$MAJORMINOR*.whl |grep -m 1 ".whl")
      echo full path to wheel file = ${pathToWheel}
      python3 -m pip install ${pathToWheel}
    fi
  displayName: Install Cognitive Service Speech SDK Python package.
  condition: and(succeeded(), contains(variables['Agent.Name'], 'Hosted Ubuntu'), eq(variables['SPEECHSDK_RUN_TESTS'], 'true'), eq(${{ parameters.runLatencyTests }}, 'true'))
# this test should only run on the Linux Ubuntu Agent pool, so that the latency data produced is from datacenter "westus" to "westus2".
- bash: |
    # intentionally not using set -e because it should never fail a build due to latency tests, this is only for PowerBI telemetry data.
    # Setting TEMP only to make ensure SSL will be able to cache CRL download between different runs.
    set -u -o pipefail
    TEMP=$(pwd)
    for i in {1..20};do python3 ./ci/latency/run-latency-test.py \
      -s ${{ parameters.speechKey }} \
      -r ${{ parameters.region }} \
      ./ci/latency/latency_test_audio.wav \
      -d ./templogs/

      python3 ./ci/latency/run-latency-test.py \
      -s ${{ parameters.speechKey }} \
      -r ${{ parameters.region }} \
      ./ci/latency/batman20s.wav \
      -d ./templogs/
    done
    exit 0
  displayName: Run service latency tests.
  condition: and(succeeded(), contains(variables['Agent.Name'], 'Hosted Ubuntu'), eq(variables['SPEECHSDK_RUN_TESTS'], 'true'), eq(${{ parameters.runLatencyTests }}, 'true'))
# archive latency test logs for later review.
- task: PublishBuildArtifacts@1
  displayName: Archive Latency Test Logs
  inputs:
    PathtoPublish: './templogs/'
    ArtifactName: LatencyLogsPython${{ parameters.PythonVersion }}
    publishLocation: Container
  condition: and(succeeded(), contains(variables['Agent.Name'], 'Hosted Ubuntu'), eq(variables['SPEECHSDK_RUN_TESTS'], 'true'), eq(${{ parameters.runLatencyTests }}, 'true'))