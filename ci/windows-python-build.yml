parameters:
  continueOnTestFailure: false
  buildType: dev

jobs:
- job: WindowsPythonBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' WindowsPythonBuild '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 60
  strategy:
    maxParallel: 2
    matrix:
      Python3.5_x64:
        BuildPlatform: x64
        PythonVersion: 3.5
        pythonIncludePathSuffix: python3.5m
      # More configurations in 'int' and 'prod' builds:
      ${{ if in(parameters.buildType, 'int', 'prod') }}:
        Python3.7_x64:
          BuildPlatform: x64
          PythonVersion: 3.7
          pythonIncludePathSuffix: python3.7m
        Python3.6_x64:
          BuildPlatform: x64
          PythonVersion: 3.6
          pythonIncludePathSuffix: python3.6m
        Python3.7_Win32:
          BuildPlatform: Win32
          PythonVersion: 3.7
          pythonIncludePathSuffix: python3.7m
        Python3.6_Win32:
          BuildPlatform: Win32
          PythonVersion: 3.6
          pythonIncludePathSuffix: python3.6m
        Python3.5_Win32:
          BuildPlatform: Win32
          PythonVersion: 3.5
          pythonIncludePathSuffix: python3.5m
  variables:
    BuildConfiguration: Release
    OutputDirectory: "$(Build.ArtifactStagingDirectory)/wheelhouse"
  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x86"
          vsts_setvar SPEECHSDK_PYTHON_PLATFORM "x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x64"
          vsts_setvar SPEECHSDK_PYTHON_PLATFORM "x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - bash: |
      set -e -o pipefail -u
      . ci/functions.sh
      vsts_setvar SPEECHSDK_ENABLE_KWS true
    displayName: Set KWS variables
  - template: get-kws-artifact.yml
    parameters:
      enableVariable: SPEECHSDK_ENABLE_KWS
      os: Windows
  - template: build-python-wheel.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      buildParams: >-
        -DCMAKE_CXX_COMPILER=cl.exe
        -DCMAKE_C_COMPILER=cl.exe
        -DSPECTRE_MITIGATION=$(SPEECHSDK_SPECTRE_MITIGATION)
        -DEXTENSION_KWS_ENABLED=$(SPEECHSDK_ENABLE_KWS)
      postbuildsteps:
        - bash: |
            set -x -e -o pipefail -u
            dir="$(OutputDirectory)/pdb-$(BuildPlatform)-$(BuildConfiguration)-py$(PythonVersion)"
            mkdir -p "$dir"
            cp _skbuild/win*/cmake-build/lib/Release/_speech_py_impl.pdb "$dir"
            cp _skbuild/win*/cmake-build/bin/Release/Microsoft.CognitiveServices.Speech.core.pdb "$dir"
            cp _skbuild/win*/cmake-build/bin/Release/Microsoft.CognitiveServices.Speech.extension.kws.pdb "$dir"
          displayName: copy .PDBs
        # Remove *.dist-info/RECORD, otherwise "wheel pack" seem to pack it
        # twice on Windows (zipfile.py warns: UserWarning: Duplicate name:
        # 'azure_cognitiveservices_speech-.../RECORD)
        - bash: unzip -d repack build/*.whl && rm repack/*.dist-info/RECORD
          displayName: Unzip .whl for signing
          condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: Sign DLLs
          inputs:
            ConnectedServiceName: Speech SDK ESRP Signing
            FolderPath: repack
            Pattern: '*.pyd,Microsoft.CognitiveServices.Speech.core.dll,Microsoft.CognitiveServices.Speech.extension.kws.dll'
            signConfigType: inlineSignParams
            inlineOperation: $(SIGN_PARAMS_DLL)
          condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
        - bash: |
            mv repack/CodeSignSummary-*.md .
            wheel pack --dest-dir build repack && rm -rf repack
          displayName: Repack .whl
          condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))

