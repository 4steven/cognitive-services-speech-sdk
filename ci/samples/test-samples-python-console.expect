#!/usr/bin/expect
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.
#

if {[llength $argv] < 2} {
  send_user "Usage: [file tail [info script]] inputDir cmd-relative-to-root...\n"
  exit 1
}

set inputDir [lindex $argv 0]
set cmd [lrange $argv 1 end]

set timeout 15

source [file join [file dirname [info script]] common.expect]

spawn {*}$cmd

set testIndex 0
set testFailures 0

proc selectMenuOption {top {sub -1}} {
  expect {
    timeout {
      send_user "### TIMEOUT waiting for main menu prompt.\n"
      exit 1
    }
    "select sample module,"
  }
  send "$top\r"

  if {$sub == -1} return

  expect {
     timeout {
        send_user "### TIMEOUT waiting for sub menu prompt.\n"
        exit 1
     }
     "select sample function,"
  }
  send "$sub\r"

  expect {
    timeout {
       send_user "### TIMEOUT waiting 'You selected:'.\n"
       exit 1
    }
    "You selected:"
  }
}

# Note: use Stop exactly once, at the end of the list.
foreach scenario [list \
  recognize_intent_once_from_mic \
  speech_recognize_keyword_from_microphone \
  Stop \
] {
  incr testIndex
  send_user "\n### Running test [set testIndex] - scenario [set scenario]\n"

  switch $scenario {

    Stop {
      selectMenuOption [format "%c" 4] ;# EOF
      expect {
        timeout {
          send_user "### TIMEOUT waiting for EOF\n"
          incr testFailures
        }
        eof
      }
    }

    speech_recognize_once_from_mic {
      selectMenuOption 0 0

      # speech reco starts right away
      paplay $weatherWav

      expect {
        -re "Recognized: (\[^\r]*)\r\n" {
          assertTextEqual testFailures "reco text" $weatherText $expect_out(1,string)
        }
        "No speech could be recognized" {
          send_user "### Error: NoMatch\n"
        }
        "Speech Recognition canceled:" {
          send_user "### Error: Canceled\n"
          incr testFailures
        }
        timeout {
          send_user "### TIMEOUT waiting for Recognized\n"
          incr testFailures
        }
      }
    }

    recognize_intent_once_from_mic {
      selectMenuOption 1 0

      # speech reco starts right away
      paplay $turnOnTheLampWav

      expect {
        -re "Recognized: \"(\[^\r]*)\" with intent id `(\[^\r]*)`\r\n" {
          set failedAssertions 0
          assertTextEqual failedAssertions "intent text" $turnOnTheLampText $expect_out(1,string)
          assertTextEqual failedAssertions "intent ID" $turnOnTheLampIntent $expect_out(2,string)
          if {$failedAssertions > 0} {
            incr testFailures
          }
        }
        -re "Recognized: \[^\"]" {
          send_user "### Recognized, but no intent.\n"
          incr testFailures
        }
        "No speech could be recognized" {
          send_user "### Error: NoMatch\n"
          incr testFailures
        }
        "Intent recognition canceled:" {
          send_user "### Error: Canceled\n"
          incr testFailures
        }
        "Error running sample:" {
          send_user "### Error running sample.\n"
          incr testFailures
        }
        timeout {
          send_user "### TIMEOUT waiting for result\n"
          incr testFailures
        }
      }
    }

    speech_recognize_keyword_from_microphone {
      selectMenuOption 0 8
      expect {
        "Say something starting with" {
          set maxAttempts 3
          for {set attempt 1} {$attempt <= $maxAttempts} {incr attempt} {
            paplay $kwsWeatherWav [expr $attempt*1300]

            expect {
              -re "RECOGNIZED: \[^\r]*, text=(\[^)]*)\\)\\)\r\n" {
                assertTextEqual testFailures "reco text" $kwsWeatherText $expect_out(1,string)
                break
              }
              "CANCELED: Reason=" {
                incr testFailures
                break
              }
              timeout {
                send_user "### TIMEOUT waiting for RECOGNIZED/CANCELED\n"
              }
            }
          }
          if {$attempt > $maxAttempts} {
             # No way to stop the sample.
             send_user "### Could not finish keyword-triggered recognition. Must stop.\n"
             exit 1
          }
        }
        "Error running sample:" {
          send_user "### Error running sample.\n"
          incr testFailures
        }
        timeout {
          send_user "### TIMEOUT waiting for 'Say something'\n"
          incr testFailures
        }
      }
    }

    default {
      send_user "### invalid scenario, exiting\n"
      exit 1
    }

  }
}

send_user "### Done -- [expr $testIndex - $testFailures]/$testIndex test(s) succeeded\n"

lassign [wait] pid spawnid os_error_flag value
if {$os_error_flag == 0} {
  send_user "### sample exit status: $value\n"
  if {$value != 0} {
    send_user "### non-zero exit status\n"
    exit 1
  }
} else {
  send_user "### non-zero errno: $os_error_flag\n"
  exit 1
}

exit [set testFailures]
