#!/usr/bin/expect
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.
#

if {[llength $argv] < 2} {
  send_user "Usage: [file tail [info script]] inputDir cmd-relative-to-root...\n"
  exit 1
}

set inputDir [lindex $argv 0]
set cmd [lrange $argv 1 end]

set timeout 15

source [file join [file dirname [info script]] common.expect]

set testIndex 0
set testFailures 0

proc selectMenuOption {top {sub -1}} {
  expect {
     timeout {
        send_user "### TIMEOUT waiting for main menu prompt.\n"
        exit 1
     }
    "Choice (0 to Exit): "
  }
  send "$top\r"

  if {$sub == -1} return

  expect {
     timeout {
        send_user "### TIMEOUT waiting for sub menu prompt.\n"
        exit 1
     }
    "Choice (0 for MAIN MENU): "
  }
  send "$sub\r"
}

proc goToMainMenu {} {
  expect {
     timeout {
        send_user "### TIMEOUT waiting for sub menu prompt, cannot go back to main.\n"
        exit 1
     }
    "Choice (0 for MAIN MENU): "
  }
  send "0\r"
}

spawn {*}$cmd


foreach scenario [list \
  SpeechRecognitionUsingCustomizedModel \
  SpeechRecognitionWithLanguageAndUsingDetailedOutputFormat \
  SpeechRecognitionWithMicrophone \
  Stop \
] {
  incr testIndex
  send_user "\n### Running test [set testIndex] - scenario [set scenario]\n"

  switch $scenario {

    Stop { # Must be the last scenario
      selectMenuOption 0
      expect {
        timeout {
          send_user "### TIMEOUT waiting for EOF\n"
          incr testFailures
        }
        eof
      }
    }

    SpeechRecognitionUsingCustomizedModel -
    SpeechRecognitionWithMicrophone {
      if {[string compare $scenario SpeechRecognitionWithMicrophone]} {
        set subMenu 1
      } else {
        set subMenu 4
      }
      selectMenuOption 1 $subMenu
      expect {
        "Say something...\r\n" {
          paplay $weatherWav

          expect {
            -re "RECOGNIZED: Text=(\[^\r]*)\r\n" {
              assertTextEqual testFailures "reco text" $weatherText $expect_out(1,string)
            }
            "CANCELED: Reason=" {
              incr testFailures
            }
            timeout {
              send_user "### TIMEOUT waiting for RECOGNIZED\n"
              incr testFailures
            }
          }
        }
        timeout {
          send_user "### TIMEOUT waiting for 'Say something'\n"
          incr testFailures
        }
      }

      goToMainMenu
    }

    SpeechRecognitionWithLanguageAndUsingDetailedOutputFormat {
      selectMenuOption 1 2
      expect {
        "Say something in de-DE...\r\n" {
          paplay $germanWav

          expect {
            -re "RECOGNIZED: Text=(\[^\r]*)\r\n" {
              assertTextEqual testFailures "reco text" $germanText $expect_out(1,string)
            }
            timeout {
              send_user "### TIMEOUT waiting for RECOGNIZED\n"
              incr testFailures
            }
          }
        }
        timeout {
          send_user "### TIMEOUT waiting for 'Say something'\n"
          incr testFailures
        }
      }
      goToMainMenu
    }

    default {
      send_user "### invalid scenario, exiting\n"
      exit 1
    }
  }
}

send_user "### Done -- [expr $testIndex - $testFailures]/$testIndex test(s) succeeded\n"

# Pick up error on program exit
lassign [wait] pid spawnid os_error_flag value
if {$os_error_flag == 0} {
  send_user "### sample exit status: $value\n"
  if {$value != 0} {
    send_user "### non-zero exit status\n"
    exit 1
  }
} else {
  send_user "### non-zero errno: $os_error_flag\n"
  exit 1
}

exit [set testFailures]
