parameters:
  crt: PUBLIC_VCRT
  name: Windows
  kws: true
  suffix: ''
  continueOnTestFailure: false
jobs:
- job: ${{ parameters.name }}Test
  dependsOn: ${{ parameters.name }}Build
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 360
  strategy:
    maxParallel: 4
    matrix:
      x64_debug:
        BuildPlatform: x64
        BuildConfiguration: Debug
      x64_release:
        BuildPlatform: x64
        BuildConfiguration: Release
      x86_release:
        BuildPlatform: Win32
        BuildConfiguration: Release
      x86_debug:
        BuildPlatform: Win32
        BuildConfiguration: Debug
  variables:
    OutputDirectory: $(Build.ArtifactStagingDirectory)/$(BuildPlatform)/$(BuildConfiguration)
  steps:
  - script: |
      echo ##vso[task.prependpath]C:\Program Files\Git\mingw64\bin
      echo ##vso[task.prependpath]C:\Program Files\Git\usr\bin
      echo ##vso[task.prependpath]C:\Program Files\Git\bin
    displayName: Work around for recent broken system path on Hosted VS2017 build agents.
    # see ICM https://icm.ad.msft.net/imp/v3/incidents/details/171621867/home
    # see PR  https://github.com/actions/virtual-environments/pull/211/files that broke many bash commands on Hosted VS2017 build agents.
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Set Windows target platform (Windows-x86 or Windows-x64)
    inputs:
      type: InlineScript
      script: |
        . ci/functions.sh
        if [[ "$(BuildPlatform)" == Win32 ]]; then
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x86"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15"
          vsts_setvar SPEECHSDK_PYTHON_PLATFORM "x86"
        else
          vsts_setvar SPEECHSDK_TARGET_PLATFORM "Windows-x64"
          vsts_setvar SPEECHSDK_CMAKE_GENERATOR "Visual Studio 15 Win64"
          vsts_setvar SPEECHSDK_PYTHON_PLATFORM "x64"
        fi
        vsts_setvar SPEECHSDK_BUILD_CONFIGURATION "$(BuildConfiguration)"
        vsts_setvar SPEECHSDK_ENABLE_KWS ${{ parameters.kws }}
        vsts_setvar SPEECHSDK_ENABLE_UNIDEC true
        vsts_setvar EXTENSION_AUDIOCOMPRESSION_ENABLED true
        vsts_setvar VSTS_TOKEN "$(System.AccessToken)"
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: . ./ci/functions.sh && vsts_setvar SPEECHSDK_SPECTRE_MITIGATION false
    displayName: Reset SPEECHSDK_SPECTRE_MITIGATION in Debug
    condition: eq(variables['BuildConfiguration'], 'Debug')
  - template: get-kws-artifact.yml
    parameters:
      enableVariable: SPEECHSDK_ENABLE_KWS
      os: Windows
  - task: NuGetToolInstaller@0
    displayName: Use NuGet $(SPEECHSDK_NUGET_VERSION)
    inputs:
      versionSpec: $(SPEECHSDK_NUGET_VERSION)
  - bash: ./ci/install-build-dependencies.sh
    displayName: Install build dependencies
  - bash: |
      rm -f ./tests/test.subscriptions.regions.json
      cat > ./tests/test.subscriptions.regions.json <<HEREDOC
        $(KEYS_AND_REGIONS)
      HEREDOC
    displayName: Write Subscriptions Regions Data
  - template: install-gstreamer-windows.yml
    parameters:
      speechsdkTargetPlatfrom: $(SPEECHSDK_TARGET_PLATFORM)
      buildPlatform: $(BuildPlatform)
  - bash: |
      find ./ -type d -print | sed -e 's;[^/]*/; /;g;s;/ ;    ;g;s;^ /$;.;;s; /;|-- ;g'
    displayName: some logging
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)\In
  - template: test-after-build.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      extraTests:
        - bash: |
            echo "System artifacts directory is located at $(System.ArtifactsDirectory)"
            ./ci/run-tests-from-build.sh \
              --build-dir $(System.ArtifactsDirectory) \
              --platform Windows-x64-Release \
              --timeout 120m \
              -D long-running=true \
              -- csharp_unit_tests
          displayName: Run LongRunning tests
          condition: and(eq(variables['SPEECHSDK_RUN_TESTS'], 'true'), eq(variables['SPEECHSDK_BUILD_TYPE'], 'int'), eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildConfiguration'], 'Release'))
          continueOnError: ${{ parameters.continueOnTestFailure }}
