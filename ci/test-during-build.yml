parameters:
  extraTests: []
  dockerImage: ""
  testsToRun: ""
  runTestArgs: "-s objectivec_unittests"
  continueOnTestFailure: false
steps:
# If we failed until here, don't try to run tests:
- bash: . ci/functions.sh && vsts_setvar SPEECHSDK_RUN_TESTS false
  condition: or(failed(), canceled())
  displayName: Skip tests on build failure.
- bash: |
    set -u -e -x -o pipefail
    . ci/functions.sh
    patchSamplesFromTestConfig public_samples/samples/python/console \
      ci/test-config.json \
      -D luis-key=$(luis-westus-s0-201809-key1) \
      -D speech-key=$(NorthEuropeKeySkyman) \
      -D virtualassistant-region=$(DialogRegion) \
      -D virtualassistant-subscription=$(DialogSubscriptionKey) \
      -D virtualassistant-testbot=$(DialogFunctionalTestBot) \
      -D long-running=false \
      -D conversationtranscriber-ppe-key=$(ConverstationTranscriptionKeyWestUS220190509) \
      -D conversationtranscriber-prod-key=$(ConverstationTranscriptionKeyCentralUS20190509)
    cp tests/input/audio/*.wav public_samples/samples/python/console
  displayName: Prepare Python samples for testing (as part of python_unittests)
  condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
- bash: |
    if [[ -n $dockerImage ]]; then
      wrapMe=(docker run --rm --workdir /csspeech --env LD_LIBRARY_PATH=/csspeech/build/lib --volume "$PWD:/csspeech" "$dockerImage")
    else
      export LD_LIBRARY_PATH=$PWD/build/lib
      wrapMe=()
    fi
    "${wrapMe[@]}" ./ci/run-tests.sh \
      --test-configuration ci/test-config.json \
      --build-dir build \
      --platform $(SPEECHSDK_TARGET_PLATFORM)-$(SPEECHSDK_BUILD_CONFIGURATION) \
      --test-set $(SPEECHSDK_TEST_SET) \
      -D luis-key=$(luis-westus-s0-201809-key1) \
      -D speech-key=$(NorthEuropeKeySkyman) \
      -D virtualassistant-region=$(DialogRegion) \
      -D virtualassistant-subscription=$(DialogSubscriptionKey) \
      -D virtualassistant-testbot=$(DialogFunctionalTestBot) \
      -D conversationtranscriber-ppe-key=$(ConverstationTranscriptionKeyWestUS220190509) \
      -D conversationtranscriber-prod-key=$(ConverstationTranscriptionKeyCentralUS20190509) \
      -D long-running=false \
      ${{ parameters.runTestArgs }} -- ${{ parameters.testsToRun }}
  env:
    dockerImage: ${{ parameters.dockerImage }}
  condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
  continueOnError: ${{ parameters.continueOnTestFailure }}
  timeoutInMinutes: 180
  displayName: Run tests
# Note: the following step is only for the convenience of extraTests, of which we currently do not have any.
- bash: |
    perl ci/evaluate-test-config.pl --verbose --format azuredevops-variable --input ci/test-config.json \
      -D luis-key=$(luis-westus-s0-201809-key1) \
      -D speech-key=$(NorthEuropeKeySkyman) \
      -D virtualassistant-region=$(DialogRegion) \
      -D virtualassistant-subscription=$(DialogSubscriptionKey) \
      -D virtualassistant-testbot=$(DialogFunctionalTestBot) \
      -D conversationtranscriber-ppe-key=$(ConverstationTranscriptionKeyWestUS220190509) \
      -D conversationtranscriber-prod-key=$(ConverstationTranscriptionKeyCentralUS20190509) \
      -D long-running=false
  displayName: Set test variables
- ${{ parameters.extraTests }}
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-*.xml'
  condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
  displayName: Publish test results (.xml)
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/test-*trx'
  condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
  displayName: Publish test results (.trx)
