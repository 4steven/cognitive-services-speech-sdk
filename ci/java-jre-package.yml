parameters:
  continueOnTestFailure: false
  macArtifactName: macOS
  javaArtifactSuffix: ""

# Note: for now this packages up only {Windows,macOS}-x64-Release and Linux-{arm32,arm64,x64}-Release
jobs:
- job: ${{ format('JavaJrePackage{0}', parameters.javaArtifactSuffix) }}
  dependsOn:
    - Pre
    - LinuxBuild
    - LinuxDockerBuild
    - WindowsBuild
    - ${{ format('{0}Build', parameters.macArtifactName) }}
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JavaJrePackage '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 60
  steps:
  - script: |
      echo ##vso[task.prependpath]C:\Program Files\Git\mingw64\bin
      echo ##vso[task.prependpath]C:\Program Files\Git\usr\bin
      echo ##vso[task.prependpath]C:\Program Files\Git\bin
    displayName: Work around for recent broken system path on Hosted VS2017 build agents.
    # see ICM https://icm.ad.msft.net/imp/v3/incidents/details/171621867/home
    # see PR  https://github.com/actions/virtual-environments/pull/211/files that broke many bash commands on Hosted VS2017 build agents.
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=JavaJrePackage${{ parameters.javaArtifactSuffix }}
      ArtifactOutWindows="$(Build.ArtifactStagingDirectory)/Out/$PublishArtifactName"
      ArtifactOut="$(cygpath -au "$ArtifactOutWindows")"
      ArtifactBasename="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA)"
      MavenRoot="$ArtifactOut/maven"
      MavenRootWindows="$ArtifactOutWindows/maven"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      MavenPackageDir="$MavenRoot/$relativeMavenPackageDir"
      MavenPackageDirWindows="$MavenRootWindows/$relativeMavenPackageDir"
      vsts_setvars_by_ref PublishArtifactName Artifact{Out{,Windows},Basename} Maven{Root,PackageDir}{,Windows}
    displayName: Set package variables
  - template: install-gstreamer-windows.yml
    parameters:
      speechsdkTargetPlatfrom: Windows-x64
      buildPlatform: x64
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Linux artifacts'
    inputs:
      artifactName: Linux
      downloadPath: $(System.ArtifactsDirectory)/In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading OSX artifacts'
    inputs:
      artifactName: ${{ parameters.macArtifactName }}
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      ./ci/jre/build-jar.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)")"/In ${{ parameters.macArtifactName }}
    # Note: doc says "The file extension should match the selected archive type." - so we are renaming afterwards
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/jre/jar'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename).zip'
    displayName: 'Create .zip'
  - bash: |
      set -x -e -o pipefail
      mkdir -p "$(MavenPackageDir)"
      mv "$(ArtifactOut)/$(ArtifactBasename).zip" "$(MavenPackageDir)/$(ArtifactBasename).jar"
    displayName: 'Rename .zip -> .jar, place'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign *.jar'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing Alternate'
      FolderPath: '$(MavenRootWindows)'
      Pattern: '*.jar'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      ./ci/run-maven.sh public_samples "$(MavenRoot)"
    displayName: Build Maven-based samples
  - bash: |
      rm -f ./tests/test.subscriptions.regions.json
      cp ./tests/test.defaults.json ./
      cp ./tests/test.audio.utterances.json ./
      cat > ./tests/test.subscriptions.regions.json <<HEREDOC
        $(KEYS_AND_REGIONS)
      HEREDOC
      cp ./tests/test.subscriptions.regions.json ./
      cp -r tests/input ./
      cp ./ci/jsonsettings.py .
    displayName: Write Subscriptions Regions Data
  - bash: |
      set -x -e
      . ci/functions.sh
      GSTREAMER_RUNTIME_PATH="$(pwd)/gstreamer/1.0/x86_64/bin"
      PATH="${GSTREAMER_RUNTIME_PATH}:$PATH"
      java \
        -cp $(printf "%s;" \
          "$(MavenPackageDirWindows)/$(ArtifactBasename).jar" \
          "$(Build.ArtifactStagingDirectory)/In/Windows/x64/Release/private/bin/com.microsoft.cognitiveservices.speech.tests.jar" \
          "external/junit/junit-4.12.jar" \
          "external/junit/hamcrest-core-1.3.jar" \
          "external/json/gson-2.8.6.jar") \
          -DTestOutputFilename=test-java-unittests-package.xml \
          tests.runner.Runner \
          tests.AllTests
    displayName: Run unit test
    condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
    continueOnError: ${{ parameters.continueOnTestFailure }}
  # TODO more - e.g. POM?
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out/$(PublishArtifactName)'
      ArtifactName: $(PublishArtifactName)
      publishLocation: Container
    displayName: 'Publish .jar'
    condition: succeededOrFailed()
