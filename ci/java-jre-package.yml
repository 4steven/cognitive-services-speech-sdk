parameters:
  continueOnTestFailure: false
  macArtifactName: macOS
  javaArtifactSuffix: ""

# Note: for now this packages up only {Linux,Windows,macOS}-x64-Release and Linux-arm64-Release
jobs:
- job: ${{ format('JavaJrePackage{0}', parameters.javaArtifactSuffix) }}
  dependsOn:
    - Pre
    - LinuxBuild
    - LinuxDockerBuild
    - WindowsBuild
    - ${{ format('{0}Build', parameters.macArtifactName) }}
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' JavaJrePackage '))
  pool:
    name: Hosted VS2017
  timeoutInMinutes: 30
  steps:
  - bash: ./ci/set-variables.sh
    displayName: Set variables
  - bash: |
      set -x -e -o pipefail
      . ci/functions.sh
      PublishArtifactName=JavaJrePackage${{ parameters.javaArtifactSuffix }}
      ArtifactOutWindows="$(Build.ArtifactStagingDirectory)/Out/$PublishArtifactName"
      ArtifactOut="$(cygpath -au "$ArtifactOutWindows")"
      ArtifactBasename="$(SPEECHSDK_MAVEN_ARTIFACT_ID)-$(SPEECHSDK_SEMVER2NOMETA)"
      MavenRoot="$ArtifactOut/maven"
      MavenRootWindows="$ArtifactOutWindows/maven"
      relativeMavenPackageDir="${SPEECHSDK_MAVEN_GROUP_ID//\./\/}/$SPEECHSDK_MAVEN_ARTIFACT_ID/$SPEECHSDK_SEMVER2NOMETA"
      MavenPackageDir="$MavenRoot/$relativeMavenPackageDir"
      MavenPackageDirWindows="$MavenRootWindows/$relativeMavenPackageDir"
      vsts_setvars_by_ref PublishArtifactName Artifact{Out{,Windows},Basename} Maven{Root,PackageDir}{,Windows}
    displayName: Set package variables
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Windows artifacts'
    inputs:
      artifactName: Windows
      downloadPath: $(System.ArtifactsDirectory)/In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading Linux artifacts'
    inputs:
      artifactName: Linux
      downloadPath: $(System.ArtifactsDirectory)/In
  - task: DownloadBuildArtifacts@0
    displayName: 'Downloading OSX artifacts'
    inputs:
      artifactName: ${{ parameters.macArtifactName }}
      downloadPath: $(System.ArtifactsDirectory)/In
  - bash: |
      ./ci/jre/build-jar.sh "$(cygpath -au "$(Build.ArtifactStagingDirectory)")"/In ${{ parameters.macArtifactName }}
  # Note: doc says "The file extension should match the selected archive type." - so we are renaming afterwards
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './ci/jre/jar'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(ArtifactOutWindows)/$(ArtifactBasename).zip'
    displayName: 'Create .zip'
  - bash: |
      set -x -e -o pipefail
      mkdir -p "$(MavenPackageDir)"
      mv "$(ArtifactOut)/$(ArtifactBasename).zip" "$(MavenPackageDir)/$(ArtifactBasename).jar"
    displayName: 'Rename .zip -> .jar, place'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign *.jar'
    inputs:
      ConnectedServiceName: 'Speech SDK ESRP Signing Alternate'
      FolderPath: '$(MavenRootWindows)'
      Pattern: '*.jar'
      signConfigType: inlineSignParams
      inlineOperation: $(SIGN_PARAMS_JAVA)
    condition: and(succeeded(), eq(variables['SPEECHSDK_SIGN'], 'true'))
  - bash: |
      set -e -x -o pipefail
      perl ci/patch-samples-pkg.pl "$(SPEECHSDK_SEMVER2NOMETA)" public_samples
      ./ci/run-maven.sh public_samples "$(MavenRoot)"
    displayName: Build Maven-based samples
  - bash: |
       set -x -e
       eval $(perl ci/evaluate-test-config.pl --verbose --format bash-variable --input ci/test-config.json \
         -D luis-key=$(luis-westus-s0-201809-key1) \
         -D speech-key=$(NorthEuropeKeySkyman) \
         -D virtualassistant-region=$(DialogRegion) \
         -D virtualassistant-subscription=$(DialogSubscriptionKey) \
         -D virtualassistant-testbot=$(DialogFunctionalTestBot) \
         -D conversationtranscriber-ppe-key=$(ConverstationTranscriptionKeyWestUS220190509) \
         -D conversationtranscriber-prod-key=$(ConverstationTranscriptionKeyCentralUS20190509) \
         -D long-running=false)
       . ci/functions.sh
       java \
        -cp $(printf "%s;" \
           "$(MavenPackageDirWindows)/$(ArtifactBasename).jar" \
           "$(Build.ArtifactStagingDirectory)/In/Windows/x64/Release/private/bin/com.microsoft.cognitiveservices.speech.tests.jar" \
           "external/junit/junit-4.12.jar" \
           "external/junit/hamcrest-core-1.3.jar") \
         -DSpeechSubscriptionKey="$SPEECHSDK_SPEECH_KEY" \
         -DSpeechRegion="$SPEECHSDK_SPEECH_REGION" \
         -DLuisSubscriptionKey=$(luis-westus-s0-201809-key1) \
         -DLuisRegion="$SPEECHSDK_LUIS_REGION" \
         -DLuisAppId="$SPEECHSDK_LUIS_HOMEAUTOMATION_APPID" \
         -DAudioInputDirectory=tests/input/audio \
         -DWaveFile=tests/input/audio/whatstheweatherlike.wav \
         -DKeyword=Computer \
         -DKeywordModel=/data/keyword/kws.table \
         -DTestOutputFilename=test-java-unittests-package.xml \
         -DSpeechSubscriptionKeyForVirtualAssistant="$SPEECHSDK_BOT_SUBSCRIPTION" \
         -DSpeechRegionForVirtualAssistant="$SPEECHSDK_BOT_REGION" \
         -DSpeechChannelSecretForVirtualAssistant="$SPEECHSDK_BOT_FUNCTIONALTESTBOT" \
         -DConversationTranscriptionEndpoint="$SPEECHSDK_PRINCETON_INROOM_ENDPOINT" \
         -DConversationTranscriptionPPEKey="$SPEECHSDK_PRINCETON_CONVERSATIONTRANSCRIBER_PPE_KEY" \
         -DConversationTranscriptionPRODKey="$SPEECHSDK_PRINCETON_CONVERSATIONTRANSCRIBER_PROD_KEY" \
         -DSpeechRegionForConversationTranscription="$SPEECHSDK_PRINCETON_REGION" \
         tests.runner.Runner \
         tests.AllTests
    displayName: Run unit test
    condition: eq(variables['SPEECHSDK_RUN_TESTS'], 'true')
    continueOnError: ${{ parameters.continueOnTestFailure }}
  # TODO more - e.g. POM?
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Out/$(PublishArtifactName)'
      ArtifactName: $(PublishArtifactName)
      publishLocation: Container
    displayName: 'Publish .jar'
    condition: succeededOrFailed()

