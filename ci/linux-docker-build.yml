# Note: using build template expressions we are conditionally extending the
#   matrix of this job based on build types. Those expressions replicate
#   existing code in set-variables.sh; both instances should be kept in sync.

parameters:
  continueOnTestFailure: false
  buildType: dev

jobs:
- job: LinuxDockerBuild
  dependsOn: Pre
  condition: and(succeeded(), contains(dependencies.Pre.outputs['var.SPEECHSDK_BUILD_PHASES'], ' LinuxDockerBuild '))
  pool:
    name: Hosted Ubuntu 1604
  timeoutInMinutes: 80
  variables:
    # Whether to publish binaries for the specific flavor.
    Publish: true
  strategy:
    maxParallel: 4
    matrix:
      Linux x86 Release:
        SPEECHSDK_TARGET_PLATFORM: Linux-x86
        SPEECHSDK_BUILD_CONFIGURATION: Release
        DOCKER_BASE: dev_ubuntu1604_x86
      Linux x86 Debug:
        SPEECHSDK_TARGET_PLATFORM: Linux-x86
        SPEECHSDK_BUILD_CONFIGURATION: Debug
        DOCKER_BASE: dev_ubuntu1604_x86
      Linux arm32 Debug:
        SPEECHSDK_TARGET_PLATFORM: Linux-arm32
        SPEECHSDK_BUILD_CONFIGURATION: Debug
        DOCKER_BASE: dev_ubuntu1604_arm32
      # More configurations in 'int' and 'prod' builds (cf. set-variables.sh)
      ${{ if in(parameters.buildType, 'int', 'prod') }}:
        Linux arm32 Release:
          SPEECHSDK_TARGET_PLATFORM: Linux-arm32
          SPEECHSDK_BUILD_CONFIGURATION: Release
          DOCKER_BASE: dev_ubuntu1604_arm32
        Debian9 OpenSSL 1.1 x64 Debug:
          SPEECHSDK_TARGET_PLATFORM: Linux-x64
          SPEECHSDK_BUILD_CONFIGURATION: Debug
          DOCKER_BASE: dev_debian9_x64
          # Do not publish; this is just checking we can build on Debian 9 with
          # OpenSSL 1.1, and run tests during build.
          Publish: false
  steps:
  - bash: |
      set -x -e -o pipefail
      # Emulation need only on non-Intel
      [[ $SPEECHSDK_TARGET_PLATFORM =~ ^(Linux|Debian9)-(x86|x64)$ ]] || {
        sudo apt-get update
        sudo apt-get install --yes binfmt-support qemu-user-static
      }
      . ci/functions.sh
      ./ci/set-variables.sh
      if [[ $SPEECHSDK_TARGET_PLATFORM = Linux-x86 ]]; then
        # N.B. this is built but not shipped in LinuxDrop.
        vsts_setvar SPEECHSDK_ENABLE_KWS true
      else
        vsts_setvar SPEECHSDK_ENABLE_KWS false
      fi
      vsts_setvar SPEECHSDK_ENABLE_CODEC true
    displayName: Set variables
  - template: get-kws-artifact.yml
    parameters:
      enableVariable: SPEECHSDK_ENABLE_KWS
      os: Linux
  - template: get-docker-image.yml
    parameters:
      imageBase: $(DOCKER_BASE)
      outvarImage: DOCKER_IMAGE
  - bash: |
      docker run --rm -i --workdir /csspeech --volume "$PWD:/csspeech" "$DOCKER_IMAGE" bash - <<"SCRIPT"
        set -e
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=$(SPEECHSDK_BUILD_CONFIGURATION) \
          -DSPEECHSDK_TARGET_PLATFORM=$(SPEECHSDK_TARGET_PLATFORM) \
          -DSPEECHSDK_BUILD_TYPE=$(SPEECHSDK_BUILD_TYPE) \
          -DSPEECHSDK_VERSION=$(SPEECHSDK_SEMVER2NOMETA) \
          -DEXTENSION_KWS_ENABLED=$(SPEECHSDK_ENABLE_KWS) \
          -DEXTENSION_CODEC_ENABLED="%SPEECHSDK_ENABLE_CODEC%" \
          ..
        cmake --build . -- -j$(nproc)
      SCRIPT
    displayName: CMake build
  - bash: |
      docker run --rm --workdir /csspeech --volume "$PWD:/csspeech" "$DOCKER_IMAGE" \
        ci/drop/bindrop.sh $(SPEECHSDK_TARGET_PLATFORM) $(SPEECHSDK_BUILD_CONFIGURATION) _drop
    displayName: Create drop files
  - bash: |
      mkdir -p $(Build.ArtifactStagingDirectory)/$(SPEECHSDK_TARGET_PLATFORM)
      cp -R -p _drop $(Build.ArtifactStagingDirectory)/$(SPEECHSDK_TARGET_PLATFORM)/$(SPEECHSDK_BUILD_CONFIGURATION)
    displayName: Move drop files
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Release)
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Linux
      publishLocation: Container
    condition: and(succeeded(), eq(variables['Publish'], 'true'))
  - template: test-during-build.yml
    parameters:
      continueOnTestFailure: ${{ parameters.continueOnTestFailure }}
      dockerImage: $(DOCKER_IMAGE)
